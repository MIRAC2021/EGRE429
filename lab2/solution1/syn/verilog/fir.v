// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="fir_fir,hls_ip_2023_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z010-clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=6.712000,HLS_SYN_LAT=138,HLS_SYN_TPT=none,HLS_SYN_MEM=2,HLS_SYN_DSP=0,HLS_SYN_FF=295,HLS_SYN_LUT=330,HLS_VERSION=2023_2}" *)

module fir (
        ap_clk,
        ap_rst_n,
        s_axi_fir_io_AWVALID,
        s_axi_fir_io_AWREADY,
        s_axi_fir_io_AWADDR,
        s_axi_fir_io_WVALID,
        s_axi_fir_io_WREADY,
        s_axi_fir_io_WDATA,
        s_axi_fir_io_WSTRB,
        s_axi_fir_io_ARVALID,
        s_axi_fir_io_ARREADY,
        s_axi_fir_io_ARADDR,
        s_axi_fir_io_RVALID,
        s_axi_fir_io_RREADY,
        s_axi_fir_io_RDATA,
        s_axi_fir_io_RRESP,
        s_axi_fir_io_BVALID,
        s_axi_fir_io_BREADY,
        s_axi_fir_io_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 7'd1;
parameter    ap_ST_fsm_state2 = 7'd2;
parameter    ap_ST_fsm_state3 = 7'd4;
parameter    ap_ST_fsm_state4 = 7'd8;
parameter    ap_ST_fsm_state5 = 7'd16;
parameter    ap_ST_fsm_state6 = 7'd32;
parameter    ap_ST_fsm_state7 = 7'd64;
parameter    C_S_AXI_FIR_IO_DATA_WIDTH = 32;
parameter    C_S_AXI_FIR_IO_ADDR_WIDTH = 6;
parameter    C_S_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_FIR_IO_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
input   s_axi_fir_io_AWVALID;
output   s_axi_fir_io_AWREADY;
input  [C_S_AXI_FIR_IO_ADDR_WIDTH - 1:0] s_axi_fir_io_AWADDR;
input   s_axi_fir_io_WVALID;
output   s_axi_fir_io_WREADY;
input  [C_S_AXI_FIR_IO_DATA_WIDTH - 1:0] s_axi_fir_io_WDATA;
input  [C_S_AXI_FIR_IO_WSTRB_WIDTH - 1:0] s_axi_fir_io_WSTRB;
input   s_axi_fir_io_ARVALID;
output   s_axi_fir_io_ARREADY;
input  [C_S_AXI_FIR_IO_ADDR_WIDTH - 1:0] s_axi_fir_io_ARADDR;
output   s_axi_fir_io_RVALID;
input   s_axi_fir_io_RREADY;
output  [C_S_AXI_FIR_IO_DATA_WIDTH - 1:0] s_axi_fir_io_RDATA;
output  [1:0] s_axi_fir_io_RRESP;
output   s_axi_fir_io_BVALID;
input   s_axi_fir_io_BREADY;
output  [1:0] s_axi_fir_io_BRESP;
output   interrupt;

 reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [6:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
wire   [15:0] data_out;
reg    data_out_ap_vld;
wire  signed [15:0] data_in;
reg   [6:0] shift_reg_address0;
reg    shift_reg_ce0;
reg    shift_reg_we0;
reg   [15:0] shift_reg_d0;
wire   [15:0] shift_reg_q0;
wire   [15:0] shift_reg_q1;
reg  signed [15:0] shift_reg_load_reg_129;
wire    ap_CS_fsm_state2;
wire   [21:0] mul_ln12_fu_91_p2;
reg   [21:0] mul_ln12_reg_134;
wire    ap_CS_fsm_state3;
reg  signed [15:0] data_in_read_reg_139;
wire    ap_CS_fsm_state4;
wire    grp_fir_Pipeline_loop_fu_78_ap_start;
wire    grp_fir_Pipeline_loop_fu_78_ap_done;
wire    grp_fir_Pipeline_loop_fu_78_ap_idle;
wire    grp_fir_Pipeline_loop_fu_78_ap_ready;
wire   [30:0] grp_fir_Pipeline_loop_fu_78_acc_2_out;
wire    grp_fir_Pipeline_loop_fu_78_acc_2_out_ap_vld;
wire   [6:0] grp_fir_Pipeline_loop_fu_78_shift_reg_address0;
wire    grp_fir_Pipeline_loop_fu_78_shift_reg_ce0;
wire    grp_fir_Pipeline_loop_fu_78_shift_reg_we0;
wire   [15:0] grp_fir_Pipeline_loop_fu_78_shift_reg_d0;
wire   [6:0] grp_fir_Pipeline_loop_fu_78_shift_reg_address1;
wire    grp_fir_Pipeline_loop_fu_78_shift_reg_ce1;
reg    grp_fir_Pipeline_loop_fu_78_ap_start_reg;
wire    ap_CS_fsm_state5;
reg  signed [30:0] acc_2_loc_fu_54;
wire    ap_CS_fsm_state6;
wire    ap_CS_fsm_state7;
wire   [6:0] mul_ln12_fu_91_p1;
wire  signed [30:0] grp_fu_114_p3;
wire   [5:0] grp_fu_114_p1;
reg    grp_fu_114_ce;
reg   [6:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
wire    ap_ST_fsm_state4_blk;
reg    ap_ST_fsm_state5_blk;
wire    ap_ST_fsm_state6_blk;
wire    ap_ST_fsm_state7_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 7'd1;
#0 grp_fir_Pipeline_loop_fu_78_ap_start_reg = 1'b0;
end

fir_shift_reg_RAM_AUTO_1R1W #(
    .DataWidth( 16 ),
    .AddressRange( 128 ),
    .AddressWidth( 7 ))
shift_reg_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(shift_reg_address0),
    .ce0(shift_reg_ce0),
    .we0(shift_reg_we0),
    .d0(shift_reg_d0),
    .q0(shift_reg_q0),
    .address1(grp_fir_Pipeline_loop_fu_78_shift_reg_address1),
    .ce1(grp_fir_Pipeline_loop_fu_78_shift_reg_ce1),
    .q1(shift_reg_q1)
);

fir_fir_Pipeline_loop grp_fir_Pipeline_loop_fu_78(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_fir_Pipeline_loop_fu_78_ap_start),
    .ap_done(grp_fir_Pipeline_loop_fu_78_ap_done),
    .ap_idle(grp_fir_Pipeline_loop_fu_78_ap_idle),
    .ap_ready(grp_fir_Pipeline_loop_fu_78_ap_ready),
    .sext_ln12(mul_ln12_reg_134),
    .acc_2_out(grp_fir_Pipeline_loop_fu_78_acc_2_out),
    .acc_2_out_ap_vld(grp_fir_Pipeline_loop_fu_78_acc_2_out_ap_vld),
    .shift_reg_address0(grp_fir_Pipeline_loop_fu_78_shift_reg_address0),
    .shift_reg_ce0(grp_fir_Pipeline_loop_fu_78_shift_reg_ce0),
    .shift_reg_we0(grp_fir_Pipeline_loop_fu_78_shift_reg_we0),
    .shift_reg_d0(grp_fir_Pipeline_loop_fu_78_shift_reg_d0),
    .shift_reg_address1(grp_fir_Pipeline_loop_fu_78_shift_reg_address1),
    .shift_reg_ce1(grp_fir_Pipeline_loop_fu_78_shift_reg_ce1),
    .shift_reg_q1(shift_reg_q1)
);

fir_fir_io_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_FIR_IO_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_FIR_IO_DATA_WIDTH ))
fir_io_s_axi_U(
    .AWVALID(s_axi_fir_io_AWVALID),
    .AWREADY(s_axi_fir_io_AWREADY),
    .AWADDR(s_axi_fir_io_AWADDR),
    .WVALID(s_axi_fir_io_WVALID),
    .WREADY(s_axi_fir_io_WREADY),
    .WDATA(s_axi_fir_io_WDATA),
    .WSTRB(s_axi_fir_io_WSTRB),
    .ARVALID(s_axi_fir_io_ARVALID),
    .ARREADY(s_axi_fir_io_ARREADY),
    .ARADDR(s_axi_fir_io_ARADDR),
    .RVALID(s_axi_fir_io_RVALID),
    .RREADY(s_axi_fir_io_RREADY),
    .RDATA(s_axi_fir_io_RDATA),
    .RRESP(s_axi_fir_io_RRESP),
    .BVALID(s_axi_fir_io_BVALID),
    .BREADY(s_axi_fir_io_BREADY),
    .BRESP(s_axi_fir_io_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .data_out(data_out),
    .data_out_ap_vld(data_out_ap_vld),
    .data_in(data_in),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle)
);

fir_mul_16s_7ns_22_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 7 ),
    .dout_WIDTH( 22 ))
mul_16s_7ns_22_1_1_U7(
    .din0(shift_reg_load_reg_129),
    .din1(mul_ln12_fu_91_p1),
    .dout(mul_ln12_fu_91_p2)
);

fir_mac_muladd_16s_6ns_31s_31_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 6 ),
    .din2_WIDTH( 31 ),
    .dout_WIDTH( 31 ))
mac_muladd_16s_6ns_31s_31_4_1_U8(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(data_in),
    .din1(grp_fu_114_p1),
    .din2(acc_2_loc_fu_54),
    .ce(grp_fu_114_ce),
    .dout(grp_fu_114_p3)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_fir_Pipeline_loop_fu_78_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state4)) begin
            grp_fir_Pipeline_loop_fu_78_ap_start_reg <= 1'b1;
        end else if ((grp_fir_Pipeline_loop_fu_78_ap_ready == 1'b1)) begin
            grp_fir_Pipeline_loop_fu_78_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((grp_fir_Pipeline_loop_fu_78_acc_2_out_ap_vld == 1'b1) & (1'b1 == ap_CS_fsm_state5))) begin
        acc_2_loc_fu_54 <= grp_fir_Pipeline_loop_fu_78_acc_2_out;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        data_in_read_reg_139 <= data_in;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        mul_ln12_reg_134 <= mul_ln12_fu_91_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        shift_reg_load_reg_129 <= shift_reg_q0;
    end
end

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

assign ap_ST_fsm_state3_blk = 1'b0;

assign ap_ST_fsm_state4_blk = 1'b0;

always @ (*) begin
    if ((grp_fir_Pipeline_loop_fu_78_ap_done == 1'b0)) begin
        ap_ST_fsm_state5_blk = 1'b1;
    end else begin
        ap_ST_fsm_state5_blk = 1'b0;
    end
end

assign ap_ST_fsm_state6_blk = 1'b0;

assign ap_ST_fsm_state7_blk = 1'b0;

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        data_out_ap_vld = 1'b1;
    end else begin
        data_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | ((grp_fir_Pipeline_loop_fu_78_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state5)))) begin
        grp_fu_114_ce = 1'b1;
    end else begin
        grp_fu_114_ce = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        shift_reg_address0 = 7'd0;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        shift_reg_address0 = 7'd127;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        shift_reg_address0 = grp_fir_Pipeline_loop_fu_78_shift_reg_address0;
    end else begin
        shift_reg_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1)))) begin
        shift_reg_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        shift_reg_ce0 = grp_fir_Pipeline_loop_fu_78_shift_reg_ce0;
    end else begin
        shift_reg_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        shift_reg_d0 = data_in_read_reg_139;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        shift_reg_d0 = grp_fir_Pipeline_loop_fu_78_shift_reg_d0;
    end else begin
        shift_reg_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        shift_reg_we0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        shift_reg_we0 = grp_fir_Pipeline_loop_fu_78_shift_reg_we0;
    end else begin
        shift_reg_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            if (((grp_fir_Pipeline_loop_fu_78_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign data_out = {{grp_fu_114_p3[30:15]}};

assign grp_fir_Pipeline_loop_fu_78_ap_start = grp_fir_Pipeline_loop_fu_78_ap_start_reg;

assign grp_fu_114_p1 = 23'd51;

assign mul_ln12_fu_91_p1 = 22'd51;

endmodule //fir
