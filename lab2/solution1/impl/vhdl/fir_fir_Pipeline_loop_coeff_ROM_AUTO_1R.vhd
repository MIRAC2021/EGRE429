-- ==============================================================
-- Generated by Vitis HLS v2023.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity fir_fir_Pipeline_loop_coeff_ROM_AUTO_1R is 
    generic(
             DataWidth     : integer := 12; 
             AddressWidth     : integer := 8; 
             AddressRange    : integer := 129
    ); 
    port (
 
          address0        : in std_logic_vector(AddressWidth-1 downto 0); 
          ce0             : in std_logic; 
          q0              : out std_logic_vector(DataWidth-1 downto 0);

          reset               : in std_logic;
          clk                 : in std_logic
    ); 
end entity; 


architecture rtl of fir_fir_Pipeline_loop_coeff_ROM_AUTO_1R is 
 
signal address0_tmp : std_logic_vector(AddressWidth-1 downto 0); 

type mem_array is array (0 to AddressRange-1) of std_logic_vector (DataWidth-1 downto 0); 

signal mem0 : mem_array := (
    0 => "000000110011", 1 => "000000000100", 2 => "111111111111", 3 => "111111111010", 
    4 => "111111110111", 5 => "111111110110", 6 => "111111111010", 7 => "000000000000", 
    8 => "000000000111", 9 => "000000001101", 10 => "000000001110", 11 => "000000001010", 
    12 => "000000000010", 13 => "111111111000", 14 => "111111101111", 15 => "111111101100", 
    16 => "111111110000", 17 => "111111111011", 18 => "000000001001", 19 => "000000010110", 
    20 => "000000011011", 21 => "000000011000", 22 => "000000001010", 23 => "111111110111", 
    24 => "111111100110", 25 => "111111011100", 26 => "111111011111", 27 => "111111101111", 
    28 => "000000000111", 29 => "000000011111", 30 => "000000101111", 31 => "000000101110", 
    32 => "000000011100", 33 => "111111111101", 34 => "111111011100", 35 => "111111000100", 
    36 => "111111000000", 37 => "111111010101", 38 => "111111111100", 39 => "000000101001", 
    40 => "000001001100", 41 => "000001010111", 42 => "000001000010", 43 => "000000010001", 
    44 => "111111010011", 45 => "111110011110", 46 => "111110000111", 47 => "111110011011", 
    48 => "111111011010", 49 => "000000110001", 50 => "000010000100", 51 => "000010110010", 
    52 => "000010100011", 53 => "000001010001", 54 => "111111001101", 55 => "111100111110", 
    56 => "111011011000", 57 => "111011001101", 58 => "111101000000", 59 => "000000110101", 
    60 => "000110001111", 61 => "001100010100", 62 => "010001111001", 63 => "010101110010", 
    64 => "010111001100", 65 => "010101110010", 66 => "010001111001", 67 => "001100010100", 
    68 => "000110001111", 69 => "000000110101", 70 => "111101000000", 71 => "111011001101", 
    72 => "111011011000", 73 => "111100111110", 74 => "111111001101", 75 => "000001010001", 
    76 => "000010100011", 77 => "000010110010", 78 => "000010000100", 79 => "000000110001", 
    80 => "111111011010", 81 => "111110011011", 82 => "111110000111", 83 => "111110011110", 
    84 => "111111010011", 85 => "000000010001", 86 => "000001000010", 87 => "000001010111", 
    88 => "000001001100", 89 => "000000101001", 90 => "111111111100", 91 => "111111010101", 
    92 => "111111000000", 93 => "111111000100", 94 => "111111011100", 95 => "111111111101", 
    96 => "000000011100", 97 => "000000101110", 98 => "000000101111", 99 => "000000011111", 
    100 => "000000000111", 101 => "111111101111", 102 => "111111011111", 103 => "111111011100", 
    104 => "111111100110", 105 => "111111110111", 106 => "000000001010", 107 => "000000011000", 
    108 => "000000011011", 109 => "000000010110", 110 => "000000001001", 111 => "111111111011", 
    112 => "111111110000", 113 => "111111101100", 114 => "111111101111", 115 => "111111111000", 
    116 => "000000000010", 117 => "000000001010", 118 => "000000001110", 119 => "000000001101", 
    120 => "000000000111", 121 => "000000000000", 122 => "111111111010", 123 => "111111110110", 
    124 => "111111110111", 125 => "111111111010", 126 => "111111111111", 127 => "000000000100", 
    128 => "000000110011");



begin 

 
memory_access_guard_0: process (address0) 
begin
      address0_tmp <= address0;
--synthesis translate_off
      if (CONV_INTEGER(address0) > AddressRange-1) then
           address0_tmp <= (others => '0');
      else 
           address0_tmp <= address0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
 
        if (ce0 = '1') then  
            q0 <= mem0(CONV_INTEGER(address0_tmp)); 
        end if;

end if;
end process;

end rtl;

