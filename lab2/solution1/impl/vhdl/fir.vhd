-- ==============================================================
-- Generated by Vitis HLS v2023.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity fir is
generic (
    C_S_AXI_FIR_IO_ADDR_WIDTH : INTEGER := 6;
    C_S_AXI_FIR_IO_DATA_WIDTH : INTEGER := 32 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    s_axi_fir_io_AWVALID : IN STD_LOGIC;
    s_axi_fir_io_AWREADY : OUT STD_LOGIC;
    s_axi_fir_io_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_FIR_IO_ADDR_WIDTH-1 downto 0);
    s_axi_fir_io_WVALID : IN STD_LOGIC;
    s_axi_fir_io_WREADY : OUT STD_LOGIC;
    s_axi_fir_io_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_FIR_IO_DATA_WIDTH-1 downto 0);
    s_axi_fir_io_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_FIR_IO_DATA_WIDTH/8-1 downto 0);
    s_axi_fir_io_ARVALID : IN STD_LOGIC;
    s_axi_fir_io_ARREADY : OUT STD_LOGIC;
    s_axi_fir_io_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_FIR_IO_ADDR_WIDTH-1 downto 0);
    s_axi_fir_io_RVALID : OUT STD_LOGIC;
    s_axi_fir_io_RREADY : IN STD_LOGIC;
    s_axi_fir_io_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_FIR_IO_DATA_WIDTH-1 downto 0);
    s_axi_fir_io_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_fir_io_BVALID : OUT STD_LOGIC;
    s_axi_fir_io_BREADY : IN STD_LOGIC;
    s_axi_fir_io_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of fir is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "fir_fir,hls_ip_2023_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z010-clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=6.712000,HLS_SYN_LAT=138,HLS_SYN_TPT=none,HLS_SYN_MEM=2,HLS_SYN_DSP=0,HLS_SYN_FF=295,HLS_SYN_LUT=330,HLS_VERSION=2023_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (6 downto 0) := "0000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (6 downto 0) := "0000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (6 downto 0) := "0001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (6 downto 0) := "0010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (6 downto 0) := "0100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant C_S_AXI_DATA_WIDTH : INTEGER := 32;
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv7_7F : STD_LOGIC_VECTOR (6 downto 0) := "1111111";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv22_33 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000000000110011";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv23_33 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000110011";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal data_out : STD_LOGIC_VECTOR (15 downto 0);
    signal data_out_ap_vld : STD_LOGIC;
    signal data_in : STD_LOGIC_VECTOR (15 downto 0);
    signal shift_reg_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal shift_reg_ce0 : STD_LOGIC;
    signal shift_reg_we0 : STD_LOGIC;
    signal shift_reg_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal shift_reg_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal shift_reg_q1 : STD_LOGIC_VECTOR (15 downto 0);
    signal shift_reg_load_reg_129 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal mul_ln12_fu_91_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal mul_ln12_reg_134 : STD_LOGIC_VECTOR (21 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal data_in_read_reg_139 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal grp_fir_Pipeline_loop_fu_78_ap_start : STD_LOGIC;
    signal grp_fir_Pipeline_loop_fu_78_ap_done : STD_LOGIC;
    signal grp_fir_Pipeline_loop_fu_78_ap_idle : STD_LOGIC;
    signal grp_fir_Pipeline_loop_fu_78_ap_ready : STD_LOGIC;
    signal grp_fir_Pipeline_loop_fu_78_acc_2_out : STD_LOGIC_VECTOR (30 downto 0);
    signal grp_fir_Pipeline_loop_fu_78_acc_2_out_ap_vld : STD_LOGIC;
    signal grp_fir_Pipeline_loop_fu_78_shift_reg_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_fir_Pipeline_loop_fu_78_shift_reg_ce0 : STD_LOGIC;
    signal grp_fir_Pipeline_loop_fu_78_shift_reg_we0 : STD_LOGIC;
    signal grp_fir_Pipeline_loop_fu_78_shift_reg_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fir_Pipeline_loop_fu_78_shift_reg_address1 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_fir_Pipeline_loop_fu_78_shift_reg_ce1 : STD_LOGIC;
    signal grp_fir_Pipeline_loop_fu_78_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal acc_2_loc_fu_54 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal mul_ln12_fu_91_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_fu_114_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal grp_fu_114_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_fu_114_ce : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ST_fsm_state7_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component fir_fir_Pipeline_loop IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        sext_ln12 : IN STD_LOGIC_VECTOR (21 downto 0);
        acc_2_out : OUT STD_LOGIC_VECTOR (30 downto 0);
        acc_2_out_ap_vld : OUT STD_LOGIC;
        shift_reg_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
        shift_reg_ce0 : OUT STD_LOGIC;
        shift_reg_we0 : OUT STD_LOGIC;
        shift_reg_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        shift_reg_address1 : OUT STD_LOGIC_VECTOR (6 downto 0);
        shift_reg_ce1 : OUT STD_LOGIC;
        shift_reg_q1 : IN STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component fir_mul_16s_7ns_22_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (6 downto 0);
        dout : OUT STD_LOGIC_VECTOR (21 downto 0) );
    end component;


    component fir_mac_muladd_16s_6ns_31s_31_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (5 downto 0);
        din2 : IN STD_LOGIC_VECTOR (30 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (30 downto 0) );
    end component;


    component fir_shift_reg_RAM_AUTO_1R1W IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (15 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        address1 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component fir_fir_io_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        data_out : IN STD_LOGIC_VECTOR (15 downto 0);
        data_out_ap_vld : IN STD_LOGIC;
        data_in : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC );
    end component;



begin
    shift_reg_U : component fir_shift_reg_RAM_AUTO_1R1W
    generic map (
        DataWidth => 16,
        AddressRange => 128,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => shift_reg_address0,
        ce0 => shift_reg_ce0,
        we0 => shift_reg_we0,
        d0 => shift_reg_d0,
        q0 => shift_reg_q0,
        address1 => grp_fir_Pipeline_loop_fu_78_shift_reg_address1,
        ce1 => grp_fir_Pipeline_loop_fu_78_shift_reg_ce1,
        q1 => shift_reg_q1);

    grp_fir_Pipeline_loop_fu_78 : component fir_fir_Pipeline_loop
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_fir_Pipeline_loop_fu_78_ap_start,
        ap_done => grp_fir_Pipeline_loop_fu_78_ap_done,
        ap_idle => grp_fir_Pipeline_loop_fu_78_ap_idle,
        ap_ready => grp_fir_Pipeline_loop_fu_78_ap_ready,
        sext_ln12 => mul_ln12_reg_134,
        acc_2_out => grp_fir_Pipeline_loop_fu_78_acc_2_out,
        acc_2_out_ap_vld => grp_fir_Pipeline_loop_fu_78_acc_2_out_ap_vld,
        shift_reg_address0 => grp_fir_Pipeline_loop_fu_78_shift_reg_address0,
        shift_reg_ce0 => grp_fir_Pipeline_loop_fu_78_shift_reg_ce0,
        shift_reg_we0 => grp_fir_Pipeline_loop_fu_78_shift_reg_we0,
        shift_reg_d0 => grp_fir_Pipeline_loop_fu_78_shift_reg_d0,
        shift_reg_address1 => grp_fir_Pipeline_loop_fu_78_shift_reg_address1,
        shift_reg_ce1 => grp_fir_Pipeline_loop_fu_78_shift_reg_ce1,
        shift_reg_q1 => shift_reg_q1);

    fir_io_s_axi_U : component fir_fir_io_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_FIR_IO_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_FIR_IO_DATA_WIDTH)
    port map (
        AWVALID => s_axi_fir_io_AWVALID,
        AWREADY => s_axi_fir_io_AWREADY,
        AWADDR => s_axi_fir_io_AWADDR,
        WVALID => s_axi_fir_io_WVALID,
        WREADY => s_axi_fir_io_WREADY,
        WDATA => s_axi_fir_io_WDATA,
        WSTRB => s_axi_fir_io_WSTRB,
        ARVALID => s_axi_fir_io_ARVALID,
        ARREADY => s_axi_fir_io_ARREADY,
        ARADDR => s_axi_fir_io_ARADDR,
        RVALID => s_axi_fir_io_RVALID,
        RREADY => s_axi_fir_io_RREADY,
        RDATA => s_axi_fir_io_RDATA,
        RRESP => s_axi_fir_io_RRESP,
        BVALID => s_axi_fir_io_BVALID,
        BREADY => s_axi_fir_io_BREADY,
        BRESP => s_axi_fir_io_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        data_out => data_out,
        data_out_ap_vld => data_out_ap_vld,
        data_in => data_in,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle);

    mul_16s_7ns_22_1_1_U7 : component fir_mul_16s_7ns_22_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 7,
        dout_WIDTH => 22)
    port map (
        din0 => shift_reg_load_reg_129,
        din1 => mul_ln12_fu_91_p1,
        dout => mul_ln12_fu_91_p2);

    mac_muladd_16s_6ns_31s_31_4_1_U8 : component fir_mac_muladd_16s_6ns_31s_31_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 6,
        din2_WIDTH => 31,
        dout_WIDTH => 31)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => data_in,
        din1 => grp_fu_114_p1,
        din2 => acc_2_loc_fu_54,
        ce => grp_fu_114_ce,
        dout => grp_fu_114_p3);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_fir_Pipeline_loop_fu_78_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_fir_Pipeline_loop_fu_78_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                    grp_fir_Pipeline_loop_fu_78_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_fir_Pipeline_loop_fu_78_ap_ready = ap_const_logic_1)) then 
                    grp_fir_Pipeline_loop_fu_78_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_fir_Pipeline_loop_fu_78_acc_2_out_ap_vld = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                acc_2_loc_fu_54 <= grp_fir_Pipeline_loop_fu_78_acc_2_out;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                data_in_read_reg_139 <= data_in;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                mul_ln12_reg_134 <= mul_ln12_fu_91_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                shift_reg_load_reg_129 <= shift_reg_q0;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, grp_fir_Pipeline_loop_fu_78_ap_done, ap_CS_fsm_state5)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                if (((grp_fir_Pipeline_loop_fu_78_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state2_blk <= ap_const_logic_0;
    ap_ST_fsm_state3_blk <= ap_const_logic_0;
    ap_ST_fsm_state4_blk <= ap_const_logic_0;

    ap_ST_fsm_state5_blk_assign_proc : process(grp_fir_Pipeline_loop_fu_78_ap_done)
    begin
        if ((grp_fir_Pipeline_loop_fu_78_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state5_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state5_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state6_blk <= ap_const_logic_0;
    ap_ST_fsm_state7_blk <= ap_const_logic_0;

    ap_done_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    data_out <= grp_fu_114_p3(30 downto 15);

    data_out_ap_vld_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            data_out_ap_vld <= ap_const_logic_1;
        else 
            data_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    grp_fir_Pipeline_loop_fu_78_ap_start <= grp_fir_Pipeline_loop_fu_78_ap_start_reg;

    grp_fu_114_ce_assign_proc : process(ap_CS_fsm_state4, grp_fir_Pipeline_loop_fu_78_ap_done, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or ((grp_fir_Pipeline_loop_fu_78_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5)))) then 
            grp_fu_114_ce <= ap_const_logic_1;
        else 
            grp_fu_114_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_114_p1 <= ap_const_lv23_33(6 - 1 downto 0);
    mul_ln12_fu_91_p1 <= ap_const_lv22_33(7 - 1 downto 0);

    shift_reg_address0_assign_proc : process(ap_CS_fsm_state1, grp_fir_Pipeline_loop_fu_78_shift_reg_address0, ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            shift_reg_address0 <= ap_const_lv7_0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            shift_reg_address0 <= ap_const_lv7_7F;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            shift_reg_address0 <= grp_fir_Pipeline_loop_fu_78_shift_reg_address0;
        else 
            shift_reg_address0 <= "XXXXXXX";
        end if; 
    end process;


    shift_reg_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, grp_fir_Pipeline_loop_fu_78_shift_reg_ce0, ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1)))) then 
            shift_reg_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            shift_reg_ce0 <= grp_fir_Pipeline_loop_fu_78_shift_reg_ce0;
        else 
            shift_reg_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    shift_reg_d0_assign_proc : process(data_in_read_reg_139, grp_fir_Pipeline_loop_fu_78_shift_reg_d0, ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            shift_reg_d0 <= data_in_read_reg_139;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            shift_reg_d0 <= grp_fir_Pipeline_loop_fu_78_shift_reg_d0;
        else 
            shift_reg_d0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    shift_reg_we0_assign_proc : process(grp_fir_Pipeline_loop_fu_78_shift_reg_we0, ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            shift_reg_we0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            shift_reg_we0 <= grp_fir_Pipeline_loop_fu_78_shift_reg_we0;
        else 
            shift_reg_we0 <= ap_const_logic_0;
        end if; 
    end process;

end behav;
