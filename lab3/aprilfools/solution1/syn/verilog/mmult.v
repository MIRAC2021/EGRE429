// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="mmult_mmult,hls_ip_2023_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z010-clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.750000,HLS_SYN_LAT=108,HLS_SYN_TPT=none,HLS_SYN_MEM=10,HLS_SYN_DSP=0,HLS_SYN_FF=1169,HLS_SYN_LUT=1849,HLS_VERSION=2023_2}" *)

module mmult (
        ap_clk,
        ap_rst_n,
        m_axi_gmem_AWVALID,
        m_axi_gmem_AWREADY,
        m_axi_gmem_AWADDR,
        m_axi_gmem_AWID,
        m_axi_gmem_AWLEN,
        m_axi_gmem_AWSIZE,
        m_axi_gmem_AWBURST,
        m_axi_gmem_AWLOCK,
        m_axi_gmem_AWCACHE,
        m_axi_gmem_AWPROT,
        m_axi_gmem_AWQOS,
        m_axi_gmem_AWREGION,
        m_axi_gmem_AWUSER,
        m_axi_gmem_WVALID,
        m_axi_gmem_WREADY,
        m_axi_gmem_WDATA,
        m_axi_gmem_WSTRB,
        m_axi_gmem_WLAST,
        m_axi_gmem_WID,
        m_axi_gmem_WUSER,
        m_axi_gmem_ARVALID,
        m_axi_gmem_ARREADY,
        m_axi_gmem_ARADDR,
        m_axi_gmem_ARID,
        m_axi_gmem_ARLEN,
        m_axi_gmem_ARSIZE,
        m_axi_gmem_ARBURST,
        m_axi_gmem_ARLOCK,
        m_axi_gmem_ARCACHE,
        m_axi_gmem_ARPROT,
        m_axi_gmem_ARQOS,
        m_axi_gmem_ARREGION,
        m_axi_gmem_ARUSER,
        m_axi_gmem_RVALID,
        m_axi_gmem_RREADY,
        m_axi_gmem_RDATA,
        m_axi_gmem_RLAST,
        m_axi_gmem_RID,
        m_axi_gmem_RUSER,
        m_axi_gmem_RRESP,
        m_axi_gmem_BVALID,
        m_axi_gmem_BREADY,
        m_axi_gmem_BRESP,
        m_axi_gmem_BID,
        m_axi_gmem_BUSER,
        s_axi_control_AWVALID,
        s_axi_control_AWREADY,
        s_axi_control_AWADDR,
        s_axi_control_WVALID,
        s_axi_control_WREADY,
        s_axi_control_WDATA,
        s_axi_control_WSTRB,
        s_axi_control_ARVALID,
        s_axi_control_ARREADY,
        s_axi_control_ARADDR,
        s_axi_control_RVALID,
        s_axi_control_RREADY,
        s_axi_control_RDATA,
        s_axi_control_RRESP,
        s_axi_control_BVALID,
        s_axi_control_BREADY,
        s_axi_control_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_pp0_stage0 = 3'd2;
parameter    ap_ST_fsm_state10 = 3'd4;
parameter    C_S_AXI_CONTROL_DATA_WIDTH = 32;
parameter    C_S_AXI_CONTROL_ADDR_WIDTH = 5;
parameter    C_S_AXI_DATA_WIDTH = 32;
parameter    C_M_AXI_GMEM_ID_WIDTH = 1;
parameter    C_M_AXI_GMEM_ADDR_WIDTH = 64;
parameter    C_M_AXI_GMEM_DATA_WIDTH = 32;
parameter    C_M_AXI_GMEM_AWUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_ARUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_WUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_RUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_BUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_USER_VALUE = 0;
parameter    C_M_AXI_GMEM_PROT_VALUE = 0;
parameter    C_M_AXI_GMEM_CACHE_VALUE = 3;
parameter    C_M_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_CONTROL_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_GMEM_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
output   m_axi_gmem_AWVALID;
input   m_axi_gmem_AWREADY;
output  [C_M_AXI_GMEM_ADDR_WIDTH - 1:0] m_axi_gmem_AWADDR;
output  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_AWID;
output  [7:0] m_axi_gmem_AWLEN;
output  [2:0] m_axi_gmem_AWSIZE;
output  [1:0] m_axi_gmem_AWBURST;
output  [1:0] m_axi_gmem_AWLOCK;
output  [3:0] m_axi_gmem_AWCACHE;
output  [2:0] m_axi_gmem_AWPROT;
output  [3:0] m_axi_gmem_AWQOS;
output  [3:0] m_axi_gmem_AWREGION;
output  [C_M_AXI_GMEM_AWUSER_WIDTH - 1:0] m_axi_gmem_AWUSER;
output   m_axi_gmem_WVALID;
input   m_axi_gmem_WREADY;
output  [C_M_AXI_GMEM_DATA_WIDTH - 1:0] m_axi_gmem_WDATA;
output  [C_M_AXI_GMEM_WSTRB_WIDTH - 1:0] m_axi_gmem_WSTRB;
output   m_axi_gmem_WLAST;
output  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_WID;
output  [C_M_AXI_GMEM_WUSER_WIDTH - 1:0] m_axi_gmem_WUSER;
output   m_axi_gmem_ARVALID;
input   m_axi_gmem_ARREADY;
output  [C_M_AXI_GMEM_ADDR_WIDTH - 1:0] m_axi_gmem_ARADDR;
output  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_ARID;
output  [7:0] m_axi_gmem_ARLEN;
output  [2:0] m_axi_gmem_ARSIZE;
output  [1:0] m_axi_gmem_ARBURST;
output  [1:0] m_axi_gmem_ARLOCK;
output  [3:0] m_axi_gmem_ARCACHE;
output  [2:0] m_axi_gmem_ARPROT;
output  [3:0] m_axi_gmem_ARQOS;
output  [3:0] m_axi_gmem_ARREGION;
output  [C_M_AXI_GMEM_ARUSER_WIDTH - 1:0] m_axi_gmem_ARUSER;
input   m_axi_gmem_RVALID;
output   m_axi_gmem_RREADY;
input  [C_M_AXI_GMEM_DATA_WIDTH - 1:0] m_axi_gmem_RDATA;
input   m_axi_gmem_RLAST;
input  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_RID;
input  [C_M_AXI_GMEM_RUSER_WIDTH - 1:0] m_axi_gmem_RUSER;
input  [1:0] m_axi_gmem_RRESP;
input   m_axi_gmem_BVALID;
output   m_axi_gmem_BREADY;
input  [1:0] m_axi_gmem_BRESP;
input  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_BID;
input  [C_M_AXI_GMEM_BUSER_WIDTH - 1:0] m_axi_gmem_BUSER;
input   s_axi_control_AWVALID;
output   s_axi_control_AWREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_AWADDR;
input   s_axi_control_WVALID;
output   s_axi_control_WREADY;
input  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_WDATA;
input  [C_S_AXI_CONTROL_WSTRB_WIDTH - 1:0] s_axi_control_WSTRB;
input   s_axi_control_ARVALID;
output   s_axi_control_ARREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_ARADDR;
output   s_axi_control_RVALID;
input   s_axi_control_RREADY;
output  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_RDATA;
output  [1:0] s_axi_control_RRESP;
output   s_axi_control_BVALID;
input   s_axi_control_BREADY;
output  [1:0] s_axi_control_BRESP;
output   interrupt;

 reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
wire   [63:0] output_r;
reg    gmem_blk_n_AW;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] first_iter_0_reg_342;
reg    gmem_blk_n_W;
reg    ap_enable_reg_pp0_iter2;
reg    gmem_blk_n_B;
reg    ap_enable_reg_pp0_iter7;
reg   [0:0] icmp_ln107_1_reg_1052;
reg   [0:0] icmp_ln107_1_reg_1052_pp0_iter6_reg;
reg   [63:0] output_r_read_reg_1043;
wire   [0:0] icmp_ln107_fu_373_p2;
reg   [0:0] icmp_ln107_reg_1048;
reg    gmem_AWVALID;
wire    gmem_AWREADY;
reg    gmem_WVALID;
wire    gmem_WREADY;
wire   [31:0] gmem_WDATA;
wire    gmem_ARREADY;
wire    gmem_RVALID;
wire   [31:0] gmem_RDATA;
wire   [8:0] gmem_RFIFONUM;
wire    gmem_BVALID;
reg    gmem_BREADY;
reg    ap_block_state3_io;
reg    ap_block_state9_pp0_stage0_iter7;
reg    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln107_1_fu_385_p2;
reg   [0:0] icmp_ln107_1_reg_1052_pp0_iter1_reg;
reg   [0:0] icmp_ln107_1_reg_1052_pp0_iter2_reg;
reg   [0:0] icmp_ln107_1_reg_1052_pp0_iter3_reg;
reg   [0:0] icmp_ln107_1_reg_1052_pp0_iter4_reg;
reg   [0:0] icmp_ln107_1_reg_1052_pp0_iter5_reg;
wire   [15:0] tmp_s_fu_954_p23;
reg   [15:0] tmp_s_reg_1062;
reg    ap_enable_reg_pp0_iter0;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
wire   [63:0] sext_ln107_fu_405_p1;
reg    ap_block_pp0_stage0_01001;
reg   [31:0] j_fu_308;
wire   [31:0] j_2_fu_1002_p2;
reg   [31:0] i_fu_312;
wire   [31:0] i_1_fu_446_p3;
reg   [6:0] loc_fu_316;
wire   [6:0] add_ln107_fu_379_p2;
wire   [61:0] trunc_ln_fu_396_p4;
wire   [0:0] icmp_ln109_fu_422_p2;
wire   [31:0] j_1_fu_434_p3;
wire   [31:0] add_ln109_fu_428_p2;
wire   [14:0] zext_ln110_cast_fu_458_p21;
wire   [3:0] trunc_ln109_fu_442_p1;
wire   [14:0] zext_ln110_cast_fu_458_p23;
wire   [14:0] tmp_1_fu_510_p21;
wire   [14:0] tmp_1_fu_510_p23;
wire   [14:0] tmp_2_fu_562_p21;
wire   [14:0] tmp_2_fu_562_p23;
wire   [15:0] tmp_3_fu_614_p21;
wire   [15:0] tmp_4_fu_662_p21;
wire   [15:0] tmp_5_fu_710_p21;
wire   [15:0] tmp_6_fu_758_p21;
wire   [14:0] tmp_7_fu_806_p21;
wire   [14:0] tmp_7_fu_806_p23;
wire   [15:0] tmp_8_fu_858_p21;
wire   [15:0] tmp_9_fu_906_p21;
wire   [15:0] tmp_s_fu_954_p2;
wire  signed [15:0] tmp_s_fu_954_p4;
wire  signed [15:0] tmp_s_fu_954_p6;
wire   [15:0] tmp_3_fu_614_p23;
wire   [15:0] tmp_4_fu_662_p23;
wire   [15:0] tmp_5_fu_710_p23;
wire   [15:0] tmp_6_fu_758_p23;
wire  signed [15:0] tmp_s_fu_954_p16;
wire   [15:0] tmp_8_fu_858_p23;
wire   [15:0] tmp_9_fu_906_p23;
wire   [15:0] tmp_s_fu_954_p21;
wire   [3:0] tmp_s_fu_954_p22;
wire    ap_CS_fsm_state10;
reg   [2:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state10_blk;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire   [3:0] zext_ln110_cast_fu_458_p1;
wire   [3:0] zext_ln110_cast_fu_458_p3;
wire   [3:0] zext_ln110_cast_fu_458_p5;
wire   [3:0] zext_ln110_cast_fu_458_p7;
wire   [3:0] zext_ln110_cast_fu_458_p9;
wire   [3:0] zext_ln110_cast_fu_458_p11;
wire   [3:0] zext_ln110_cast_fu_458_p13;
wire   [3:0] zext_ln110_cast_fu_458_p15;
wire  signed [3:0] zext_ln110_cast_fu_458_p17;
wire  signed [3:0] zext_ln110_cast_fu_458_p19;
wire   [3:0] tmp_1_fu_510_p1;
wire   [3:0] tmp_1_fu_510_p3;
wire   [3:0] tmp_1_fu_510_p5;
wire   [3:0] tmp_1_fu_510_p7;
wire   [3:0] tmp_1_fu_510_p9;
wire   [3:0] tmp_1_fu_510_p11;
wire   [3:0] tmp_1_fu_510_p13;
wire   [3:0] tmp_1_fu_510_p15;
wire  signed [3:0] tmp_1_fu_510_p17;
wire  signed [3:0] tmp_1_fu_510_p19;
wire   [3:0] tmp_2_fu_562_p1;
wire   [3:0] tmp_2_fu_562_p3;
wire   [3:0] tmp_2_fu_562_p5;
wire   [3:0] tmp_2_fu_562_p7;
wire   [3:0] tmp_2_fu_562_p9;
wire   [3:0] tmp_2_fu_562_p11;
wire   [3:0] tmp_2_fu_562_p13;
wire   [3:0] tmp_2_fu_562_p15;
wire  signed [3:0] tmp_2_fu_562_p17;
wire  signed [3:0] tmp_2_fu_562_p19;
wire   [3:0] tmp_3_fu_614_p1;
wire   [3:0] tmp_3_fu_614_p3;
wire   [3:0] tmp_3_fu_614_p5;
wire   [3:0] tmp_3_fu_614_p7;
wire   [3:0] tmp_3_fu_614_p9;
wire   [3:0] tmp_3_fu_614_p11;
wire   [3:0] tmp_3_fu_614_p13;
wire   [3:0] tmp_3_fu_614_p15;
wire  signed [3:0] tmp_3_fu_614_p17;
wire  signed [3:0] tmp_3_fu_614_p19;
wire   [3:0] tmp_4_fu_662_p1;
wire   [3:0] tmp_4_fu_662_p3;
wire   [3:0] tmp_4_fu_662_p5;
wire   [3:0] tmp_4_fu_662_p7;
wire   [3:0] tmp_4_fu_662_p9;
wire   [3:0] tmp_4_fu_662_p11;
wire   [3:0] tmp_4_fu_662_p13;
wire   [3:0] tmp_4_fu_662_p15;
wire  signed [3:0] tmp_4_fu_662_p17;
wire  signed [3:0] tmp_4_fu_662_p19;
wire   [3:0] tmp_5_fu_710_p1;
wire   [3:0] tmp_5_fu_710_p3;
wire   [3:0] tmp_5_fu_710_p5;
wire   [3:0] tmp_5_fu_710_p7;
wire   [3:0] tmp_5_fu_710_p9;
wire   [3:0] tmp_5_fu_710_p11;
wire   [3:0] tmp_5_fu_710_p13;
wire   [3:0] tmp_5_fu_710_p15;
wire  signed [3:0] tmp_5_fu_710_p17;
wire  signed [3:0] tmp_5_fu_710_p19;
wire   [3:0] tmp_6_fu_758_p1;
wire   [3:0] tmp_6_fu_758_p3;
wire   [3:0] tmp_6_fu_758_p5;
wire   [3:0] tmp_6_fu_758_p7;
wire   [3:0] tmp_6_fu_758_p9;
wire   [3:0] tmp_6_fu_758_p11;
wire   [3:0] tmp_6_fu_758_p13;
wire   [3:0] tmp_6_fu_758_p15;
wire  signed [3:0] tmp_6_fu_758_p17;
wire  signed [3:0] tmp_6_fu_758_p19;
wire   [3:0] tmp_7_fu_806_p1;
wire   [3:0] tmp_7_fu_806_p3;
wire   [3:0] tmp_7_fu_806_p5;
wire   [3:0] tmp_7_fu_806_p7;
wire   [3:0] tmp_7_fu_806_p9;
wire   [3:0] tmp_7_fu_806_p11;
wire   [3:0] tmp_7_fu_806_p13;
wire   [3:0] tmp_7_fu_806_p15;
wire  signed [3:0] tmp_7_fu_806_p17;
wire  signed [3:0] tmp_7_fu_806_p19;
wire   [3:0] tmp_8_fu_858_p1;
wire   [3:0] tmp_8_fu_858_p3;
wire   [3:0] tmp_8_fu_858_p5;
wire   [3:0] tmp_8_fu_858_p7;
wire   [3:0] tmp_8_fu_858_p9;
wire   [3:0] tmp_8_fu_858_p11;
wire   [3:0] tmp_8_fu_858_p13;
wire   [3:0] tmp_8_fu_858_p15;
wire  signed [3:0] tmp_8_fu_858_p17;
wire  signed [3:0] tmp_8_fu_858_p19;
wire   [3:0] tmp_9_fu_906_p1;
wire   [3:0] tmp_9_fu_906_p3;
wire   [3:0] tmp_9_fu_906_p5;
wire   [3:0] tmp_9_fu_906_p7;
wire   [3:0] tmp_9_fu_906_p9;
wire   [3:0] tmp_9_fu_906_p11;
wire   [3:0] tmp_9_fu_906_p13;
wire   [3:0] tmp_9_fu_906_p15;
wire  signed [3:0] tmp_9_fu_906_p17;
wire  signed [3:0] tmp_9_fu_906_p19;
wire   [3:0] tmp_s_fu_954_p1;
wire   [3:0] tmp_s_fu_954_p3;
wire   [3:0] tmp_s_fu_954_p5;
wire   [3:0] tmp_s_fu_954_p7;
wire   [3:0] tmp_s_fu_954_p9;
wire   [3:0] tmp_s_fu_954_p11;
wire   [3:0] tmp_s_fu_954_p13;
wire   [3:0] tmp_s_fu_954_p15;
wire  signed [3:0] tmp_s_fu_954_p17;
wire  signed [3:0] tmp_s_fu_954_p19;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 3'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 j_fu_308 = 32'd0;
#0 i_fu_312 = 32'd0;
#0 loc_fu_316 = 7'd0;
end

mmult_control_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CONTROL_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CONTROL_DATA_WIDTH ))
control_s_axi_U(
    .AWVALID(s_axi_control_AWVALID),
    .AWREADY(s_axi_control_AWREADY),
    .AWADDR(s_axi_control_AWADDR),
    .WVALID(s_axi_control_WVALID),
    .WREADY(s_axi_control_WREADY),
    .WDATA(s_axi_control_WDATA),
    .WSTRB(s_axi_control_WSTRB),
    .ARVALID(s_axi_control_ARVALID),
    .ARREADY(s_axi_control_ARREADY),
    .ARADDR(s_axi_control_ARADDR),
    .RVALID(s_axi_control_RVALID),
    .RREADY(s_axi_control_RREADY),
    .RDATA(s_axi_control_RDATA),
    .RRESP(s_axi_control_RRESP),
    .BVALID(s_axi_control_BVALID),
    .BREADY(s_axi_control_BREADY),
    .BRESP(s_axi_control_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .output_r(output_r),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle)
);

mmult_gmem_m_axi #(
    .CONSERVATIVE( 1 ),
    .USER_MAXREQS( 4 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 256 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_GMEM_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_GMEM_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_GMEM_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_GMEM_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_GMEM_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_GMEM_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_GMEM_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_GMEM_BUSER_WIDTH ),
    .C_USER_VALUE( C_M_AXI_GMEM_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_GMEM_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_GMEM_CACHE_VALUE ),
    .USER_RFIFONUM_WIDTH( 9 ),
    .USER_DW( 32 ),
    .USER_AW( 64 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ))
gmem_m_axi_U(
    .AWVALID(m_axi_gmem_AWVALID),
    .AWREADY(m_axi_gmem_AWREADY),
    .AWADDR(m_axi_gmem_AWADDR),
    .AWID(m_axi_gmem_AWID),
    .AWLEN(m_axi_gmem_AWLEN),
    .AWSIZE(m_axi_gmem_AWSIZE),
    .AWBURST(m_axi_gmem_AWBURST),
    .AWLOCK(m_axi_gmem_AWLOCK),
    .AWCACHE(m_axi_gmem_AWCACHE),
    .AWPROT(m_axi_gmem_AWPROT),
    .AWQOS(m_axi_gmem_AWQOS),
    .AWREGION(m_axi_gmem_AWREGION),
    .AWUSER(m_axi_gmem_AWUSER),
    .WVALID(m_axi_gmem_WVALID),
    .WREADY(m_axi_gmem_WREADY),
    .WDATA(m_axi_gmem_WDATA),
    .WSTRB(m_axi_gmem_WSTRB),
    .WLAST(m_axi_gmem_WLAST),
    .WID(m_axi_gmem_WID),
    .WUSER(m_axi_gmem_WUSER),
    .ARVALID(m_axi_gmem_ARVALID),
    .ARREADY(m_axi_gmem_ARREADY),
    .ARADDR(m_axi_gmem_ARADDR),
    .ARID(m_axi_gmem_ARID),
    .ARLEN(m_axi_gmem_ARLEN),
    .ARSIZE(m_axi_gmem_ARSIZE),
    .ARBURST(m_axi_gmem_ARBURST),
    .ARLOCK(m_axi_gmem_ARLOCK),
    .ARCACHE(m_axi_gmem_ARCACHE),
    .ARPROT(m_axi_gmem_ARPROT),
    .ARQOS(m_axi_gmem_ARQOS),
    .ARREGION(m_axi_gmem_ARREGION),
    .ARUSER(m_axi_gmem_ARUSER),
    .RVALID(m_axi_gmem_RVALID),
    .RREADY(m_axi_gmem_RREADY),
    .RDATA(m_axi_gmem_RDATA),
    .RLAST(m_axi_gmem_RLAST),
    .RID(m_axi_gmem_RID),
    .RUSER(m_axi_gmem_RUSER),
    .RRESP(m_axi_gmem_RRESP),
    .BVALID(m_axi_gmem_BVALID),
    .BREADY(m_axi_gmem_BREADY),
    .BRESP(m_axi_gmem_BRESP),
    .BID(m_axi_gmem_BID),
    .BUSER(m_axi_gmem_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(1'b0),
    .I_ARREADY(gmem_ARREADY),
    .I_ARADDR(64'd0),
    .I_ARLEN(32'd0),
    .I_RVALID(gmem_RVALID),
    .I_RREADY(1'b0),
    .I_RDATA(gmem_RDATA),
    .I_RFIFONUM(gmem_RFIFONUM),
    .I_AWVALID(gmem_AWVALID),
    .I_AWREADY(gmem_AWREADY),
    .I_AWADDR(sext_ln107_fu_405_p1),
    .I_AWLEN(32'd100),
    .I_WVALID(gmem_WVALID),
    .I_WREADY(gmem_WREADY),
    .I_WDATA(gmem_WDATA),
    .I_WSTRB(4'd15),
    .I_BVALID(gmem_BVALID),
    .I_BREADY(gmem_BREADY)
);

mmult_sparsemux_21_4_15_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .CASE0( 4'h0 ),
    .din0_WIDTH( 15 ),
    .CASE1( 4'h1 ),
    .din1_WIDTH( 15 ),
    .CASE2( 4'h2 ),
    .din2_WIDTH( 15 ),
    .CASE3( 4'h3 ),
    .din3_WIDTH( 15 ),
    .CASE4( 4'h4 ),
    .din4_WIDTH( 15 ),
    .CASE5( 4'h5 ),
    .din5_WIDTH( 15 ),
    .CASE6( 4'h6 ),
    .din6_WIDTH( 15 ),
    .CASE7( 4'h7 ),
    .din7_WIDTH( 15 ),
    .CASE8( 4'h8 ),
    .din8_WIDTH( 15 ),
    .CASE9( 4'h9 ),
    .din9_WIDTH( 15 ),
    .def_WIDTH( 15 ),
    .sel_WIDTH( 4 ),
    .dout_WIDTH( 15 ))
sparsemux_21_4_15_1_1_U1(
    .din0(15'd8604),
    .din1(15'd1277),
    .din2(15'd4279),
    .din3(15'd18737),
    .din4(15'd13366),
    .din5(15'd16467),
    .din6(15'd1121),
    .din7(15'd13779),
    .din8(15'd1195),
    .din9(15'd2128),
    .def(zext_ln110_cast_fu_458_p21),
    .sel(trunc_ln109_fu_442_p1),
    .dout(zext_ln110_cast_fu_458_p23)
);

mmult_sparsemux_21_4_15_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .CASE0( 4'h0 ),
    .din0_WIDTH( 15 ),
    .CASE1( 4'h1 ),
    .din1_WIDTH( 15 ),
    .CASE2( 4'h2 ),
    .din2_WIDTH( 15 ),
    .CASE3( 4'h3 ),
    .din3_WIDTH( 15 ),
    .CASE4( 4'h4 ),
    .din4_WIDTH( 15 ),
    .CASE5( 4'h5 ),
    .din5_WIDTH( 15 ),
    .CASE6( 4'h6 ),
    .din6_WIDTH( 15 ),
    .CASE7( 4'h7 ),
    .din7_WIDTH( 15 ),
    .CASE8( 4'h8 ),
    .din8_WIDTH( 15 ),
    .CASE9( 4'h9 ),
    .din9_WIDTH( 15 ),
    .def_WIDTH( 15 ),
    .sel_WIDTH( 4 ),
    .dout_WIDTH( 15 ))
sparsemux_21_4_15_1_1_U2(
    .din0(15'd7033),
    .din1(15'd31977),
    .din2(15'd4959),
    .din3(15'd7424),
    .din4(15'd3801),
    .din5(15'd4268),
    .din6(15'd31843),
    .din7(15'd32557),
    .din8(15'd24849),
    .din9(15'd23026),
    .def(tmp_1_fu_510_p21),
    .sel(trunc_ln109_fu_442_p1),
    .dout(tmp_1_fu_510_p23)
);

mmult_sparsemux_21_4_15_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .CASE0( 4'h0 ),
    .din0_WIDTH( 15 ),
    .CASE1( 4'h1 ),
    .din1_WIDTH( 15 ),
    .CASE2( 4'h2 ),
    .din2_WIDTH( 15 ),
    .CASE3( 4'h3 ),
    .din3_WIDTH( 15 ),
    .CASE4( 4'h4 ),
    .din4_WIDTH( 15 ),
    .CASE5( 4'h5 ),
    .din5_WIDTH( 15 ),
    .CASE6( 4'h6 ),
    .din6_WIDTH( 15 ),
    .CASE7( 4'h7 ),
    .din7_WIDTH( 15 ),
    .CASE8( 4'h8 ),
    .din8_WIDTH( 15 ),
    .CASE9( 4'h9 ),
    .din9_WIDTH( 15 ),
    .def_WIDTH( 15 ),
    .sel_WIDTH( 4 ),
    .dout_WIDTH( 15 ))
sparsemux_21_4_15_1_1_U3(
    .din0(15'd15848),
    .din1(15'd22592),
    .din2(15'd1829),
    .din3(15'd171),
    .din4(15'd28443),
    .din5(15'd7077),
    .din6(15'd25339),
    .din7(15'd15520),
    .din8(15'd2124),
    .din9(15'd10491),
    .def(tmp_2_fu_562_p21),
    .sel(trunc_ln109_fu_442_p1),
    .dout(tmp_2_fu_562_p23)
);

mmult_sparsemux_21_4_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .CASE0( 4'h0 ),
    .din0_WIDTH( 16 ),
    .CASE1( 4'h1 ),
    .din1_WIDTH( 16 ),
    .CASE2( 4'h2 ),
    .din2_WIDTH( 16 ),
    .CASE3( 4'h3 ),
    .din3_WIDTH( 16 ),
    .CASE4( 4'h4 ),
    .din4_WIDTH( 16 ),
    .CASE5( 4'h5 ),
    .din5_WIDTH( 16 ),
    .CASE6( 4'h6 ),
    .din6_WIDTH( 16 ),
    .CASE7( 4'h7 ),
    .din7_WIDTH( 16 ),
    .CASE8( 4'h8 ),
    .din8_WIDTH( 16 ),
    .CASE9( 4'h9 ),
    .din9_WIDTH( 16 ),
    .def_WIDTH( 16 ),
    .sel_WIDTH( 4 ),
    .dout_WIDTH( 16 ))
sparsemux_21_4_16_1_1_U4(
    .din0(16'd56633),
    .din1(16'd5671),
    .din2(16'd10987),
    .din3(16'd14277),
    .din4(16'd10239),
    .din5(16'd6710),
    .din6(16'd114),
    .din7(16'd61225),
    .din8(16'd13703),
    .din9(16'd24728),
    .def(tmp_3_fu_614_p21),
    .sel(trunc_ln109_fu_442_p1),
    .dout(tmp_3_fu_614_p23)
);

mmult_sparsemux_21_4_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .CASE0( 4'h0 ),
    .din0_WIDTH( 16 ),
    .CASE1( 4'h1 ),
    .din1_WIDTH( 16 ),
    .CASE2( 4'h2 ),
    .din2_WIDTH( 16 ),
    .CASE3( 4'h3 ),
    .din3_WIDTH( 16 ),
    .CASE4( 4'h4 ),
    .din4_WIDTH( 16 ),
    .CASE5( 4'h5 ),
    .din5_WIDTH( 16 ),
    .CASE6( 4'h6 ),
    .din6_WIDTH( 16 ),
    .CASE7( 4'h7 ),
    .din7_WIDTH( 16 ),
    .CASE8( 4'h8 ),
    .din8_WIDTH( 16 ),
    .CASE9( 4'h9 ),
    .din9_WIDTH( 16 ),
    .def_WIDTH( 16 ),
    .sel_WIDTH( 4 ),
    .dout_WIDTH( 16 ))
sparsemux_21_4_16_1_1_U5(
    .din0(16'd20271),
    .din1(16'd3044),
    .din2(16'd26387),
    .din3(16'd5047),
    .din4(16'd65315),
    .din5(16'd63118),
    .din6(16'd41327),
    .din7(16'd63246),
    .din8(16'd2622),
    .din9(16'd65366),
    .def(tmp_4_fu_662_p21),
    .sel(trunc_ln109_fu_442_p1),
    .dout(tmp_4_fu_662_p23)
);

mmult_sparsemux_21_4_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .CASE0( 4'h0 ),
    .din0_WIDTH( 16 ),
    .CASE1( 4'h1 ),
    .din1_WIDTH( 16 ),
    .CASE2( 4'h2 ),
    .din2_WIDTH( 16 ),
    .CASE3( 4'h3 ),
    .din3_WIDTH( 16 ),
    .CASE4( 4'h4 ),
    .din4_WIDTH( 16 ),
    .CASE5( 4'h5 ),
    .din5_WIDTH( 16 ),
    .CASE6( 4'h6 ),
    .din6_WIDTH( 16 ),
    .CASE7( 4'h7 ),
    .din7_WIDTH( 16 ),
    .CASE8( 4'h8 ),
    .din8_WIDTH( 16 ),
    .CASE9( 4'h9 ),
    .din9_WIDTH( 16 ),
    .def_WIDTH( 16 ),
    .sel_WIDTH( 4 ),
    .dout_WIDTH( 16 ))
sparsemux_21_4_16_1_1_U6(
    .din0(16'd50890),
    .din1(16'd6241),
    .din2(16'd56465),
    .din3(16'd8160),
    .din4(16'd13216),
    .din5(16'd11488),
    .din6(16'd4396),
    .din7(16'd7677),
    .din8(16'd16397),
    .din9(16'd17131),
    .def(tmp_5_fu_710_p21),
    .sel(trunc_ln109_fu_442_p1),
    .dout(tmp_5_fu_710_p23)
);

mmult_sparsemux_21_4_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .CASE0( 4'h0 ),
    .din0_WIDTH( 16 ),
    .CASE1( 4'h1 ),
    .din1_WIDTH( 16 ),
    .CASE2( 4'h2 ),
    .din2_WIDTH( 16 ),
    .CASE3( 4'h3 ),
    .din3_WIDTH( 16 ),
    .CASE4( 4'h4 ),
    .din4_WIDTH( 16 ),
    .CASE5( 4'h5 ),
    .din5_WIDTH( 16 ),
    .CASE6( 4'h6 ),
    .din6_WIDTH( 16 ),
    .CASE7( 4'h7 ),
    .din7_WIDTH( 16 ),
    .CASE8( 4'h8 ),
    .din8_WIDTH( 16 ),
    .CASE9( 4'h9 ),
    .din9_WIDTH( 16 ),
    .def_WIDTH( 16 ),
    .sel_WIDTH( 4 ),
    .dout_WIDTH( 16 ))
sparsemux_21_4_16_1_1_U7(
    .din0(16'd5115),
    .din1(16'd5679),
    .din2(16'd18920),
    .din3(16'd5048),
    .din4(16'd1088),
    .din5(16'd65511),
    .din6(16'd55364),
    .din7(16'd63725),
    .din8(16'd2559),
    .din9(16'd3606),
    .def(tmp_6_fu_758_p21),
    .sel(trunc_ln109_fu_442_p1),
    .dout(tmp_6_fu_758_p23)
);

mmult_sparsemux_21_4_15_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .CASE0( 4'h0 ),
    .din0_WIDTH( 15 ),
    .CASE1( 4'h1 ),
    .din1_WIDTH( 15 ),
    .CASE2( 4'h2 ),
    .din2_WIDTH( 15 ),
    .CASE3( 4'h3 ),
    .din3_WIDTH( 15 ),
    .CASE4( 4'h4 ),
    .din4_WIDTH( 15 ),
    .CASE5( 4'h5 ),
    .din5_WIDTH( 15 ),
    .CASE6( 4'h6 ),
    .din6_WIDTH( 15 ),
    .CASE7( 4'h7 ),
    .din7_WIDTH( 15 ),
    .CASE8( 4'h8 ),
    .din8_WIDTH( 15 ),
    .CASE9( 4'h9 ),
    .din9_WIDTH( 15 ),
    .def_WIDTH( 15 ),
    .sel_WIDTH( 4 ),
    .dout_WIDTH( 15 ))
sparsemux_21_4_15_1_1_U8(
    .din0(15'd27783),
    .din1(15'd29490),
    .din2(15'd27806),
    .din3(15'd31330),
    .din4(15'd3445),
    .din5(15'd1770),
    .din6(15'd8193),
    .din7(15'd30487),
    .din8(15'd4369),
    .din9(15'd8555),
    .def(tmp_7_fu_806_p21),
    .sel(trunc_ln109_fu_442_p1),
    .dout(tmp_7_fu_806_p23)
);

mmult_sparsemux_21_4_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .CASE0( 4'h0 ),
    .din0_WIDTH( 16 ),
    .CASE1( 4'h1 ),
    .din1_WIDTH( 16 ),
    .CASE2( 4'h2 ),
    .din2_WIDTH( 16 ),
    .CASE3( 4'h3 ),
    .din3_WIDTH( 16 ),
    .CASE4( 4'h4 ),
    .din4_WIDTH( 16 ),
    .CASE5( 4'h5 ),
    .din5_WIDTH( 16 ),
    .CASE6( 4'h6 ),
    .din6_WIDTH( 16 ),
    .CASE7( 4'h7 ),
    .din7_WIDTH( 16 ),
    .CASE8( 4'h8 ),
    .din8_WIDTH( 16 ),
    .CASE9( 4'h9 ),
    .din9_WIDTH( 16 ),
    .def_WIDTH( 16 ),
    .sel_WIDTH( 4 ),
    .dout_WIDTH( 16 ))
sparsemux_21_4_16_1_1_U9(
    .din0(16'd51657),
    .din1(16'd12625),
    .din2(16'd57458),
    .din3(16'd8290),
    .din4(16'd58862),
    .din5(16'd53609),
    .din6(16'd63539),
    .din7(16'd21586),
    .din8(16'd20598),
    .din9(16'd13607),
    .def(tmp_8_fu_858_p21),
    .sel(trunc_ln109_fu_442_p1),
    .dout(tmp_8_fu_858_p23)
);

mmult_sparsemux_21_4_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .CASE0( 4'h0 ),
    .din0_WIDTH( 16 ),
    .CASE1( 4'h1 ),
    .din1_WIDTH( 16 ),
    .CASE2( 4'h2 ),
    .din2_WIDTH( 16 ),
    .CASE3( 4'h3 ),
    .din3_WIDTH( 16 ),
    .CASE4( 4'h4 ),
    .din4_WIDTH( 16 ),
    .CASE5( 4'h5 ),
    .din5_WIDTH( 16 ),
    .CASE6( 4'h6 ),
    .din6_WIDTH( 16 ),
    .CASE7( 4'h7 ),
    .din7_WIDTH( 16 ),
    .CASE8( 4'h8 ),
    .din8_WIDTH( 16 ),
    .CASE9( 4'h9 ),
    .din9_WIDTH( 16 ),
    .def_WIDTH( 16 ),
    .sel_WIDTH( 4 ),
    .dout_WIDTH( 16 ))
sparsemux_21_4_16_1_1_U10(
    .din0(16'd13502),
    .din1(16'd47876),
    .din2(16'd56896),
    .din3(16'd49091),
    .din4(16'd5552),
    .din5(16'd14478),
    .din6(16'd2676),
    .din7(16'd54728),
    .din8(16'd50690),
    .din9(16'd56539),
    .def(tmp_9_fu_906_p21),
    .sel(trunc_ln109_fu_442_p1),
    .dout(tmp_9_fu_906_p23)
);

mmult_sparsemux_21_4_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .CASE0( 4'h0 ),
    .din0_WIDTH( 16 ),
    .CASE1( 4'h1 ),
    .din1_WIDTH( 16 ),
    .CASE2( 4'h2 ),
    .din2_WIDTH( 16 ),
    .CASE3( 4'h3 ),
    .din3_WIDTH( 16 ),
    .CASE4( 4'h4 ),
    .din4_WIDTH( 16 ),
    .CASE5( 4'h5 ),
    .din5_WIDTH( 16 ),
    .CASE6( 4'h6 ),
    .din6_WIDTH( 16 ),
    .CASE7( 4'h7 ),
    .din7_WIDTH( 16 ),
    .CASE8( 4'h8 ),
    .din8_WIDTH( 16 ),
    .CASE9( 4'h9 ),
    .din9_WIDTH( 16 ),
    .def_WIDTH( 16 ),
    .sel_WIDTH( 4 ),
    .dout_WIDTH( 16 ))
sparsemux_21_4_16_1_1_U11(
    .din0(tmp_s_fu_954_p2),
    .din1(tmp_s_fu_954_p4),
    .din2(tmp_s_fu_954_p6),
    .din3(tmp_3_fu_614_p23),
    .din4(tmp_4_fu_662_p23),
    .din5(tmp_5_fu_710_p23),
    .din6(tmp_6_fu_758_p23),
    .din7(tmp_s_fu_954_p16),
    .din8(tmp_8_fu_858_p23),
    .din9(tmp_9_fu_906_p23),
    .def(tmp_s_fu_954_p21),
    .sel(tmp_s_fu_954_p22),
    .dout(tmp_s_fu_954_p23)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state2)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state2);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            ap_enable_reg_pp0_iter7 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        first_iter_0_reg_342 <= 1'd1;
    end else if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln107_reg_1048 == 1'd0))) begin
        first_iter_0_reg_342 <= 1'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_fu_312 <= 32'd0;
    end else if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln107_reg_1048 == 1'd0))) begin
        i_fu_312 <= i_1_fu_446_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        j_fu_308 <= 32'd0;
    end else if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln107_reg_1048 == 1'd0))) begin
        j_fu_308 <= j_2_fu_1002_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        loc_fu_316 <= 7'd0;
    end else if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln107_fu_373_p2 == 1'd0))) begin
        loc_fu_316 <= add_ln107_fu_379_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln107_1_reg_1052 <= icmp_ln107_1_fu_385_p2;
        icmp_ln107_1_reg_1052_pp0_iter1_reg <= icmp_ln107_1_reg_1052;
        icmp_ln107_reg_1048 <= icmp_ln107_fu_373_p2;
        tmp_s_reg_1062 <= tmp_s_fu_954_p23;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        icmp_ln107_1_reg_1052_pp0_iter2_reg <= icmp_ln107_1_reg_1052_pp0_iter1_reg;
        icmp_ln107_1_reg_1052_pp0_iter3_reg <= icmp_ln107_1_reg_1052_pp0_iter2_reg;
        icmp_ln107_1_reg_1052_pp0_iter4_reg <= icmp_ln107_1_reg_1052_pp0_iter3_reg;
        icmp_ln107_1_reg_1052_pp0_iter5_reg <= icmp_ln107_1_reg_1052_pp0_iter4_reg;
        icmp_ln107_1_reg_1052_pp0_iter6_reg <= icmp_ln107_1_reg_1052_pp0_iter5_reg;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        output_r_read_reg_1043 <= output_r;
    end
end

assign ap_ST_fsm_state10_blk = 1'b0;

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln107_fu_373_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((first_iter_0_reg_342 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        gmem_AWVALID = 1'b1;
    end else begin
        gmem_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln107_1_reg_1052_pp0_iter6_reg == 1'd1) & (ap_enable_reg_pp0_iter7 == 1'b1))) begin
        gmem_BREADY = 1'b1;
    end else begin
        gmem_BREADY = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        gmem_WVALID = 1'b1;
    end else begin
        gmem_WVALID = 1'b0;
    end
end

always @ (*) begin
    if (((first_iter_0_reg_342 == 1'd1) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        gmem_blk_n_AW = m_axi_gmem_AWREADY;
    end else begin
        gmem_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (icmp_ln107_1_reg_1052_pp0_iter6_reg == 1'd1) & (ap_enable_reg_pp0_iter7 == 1'b1))) begin
        gmem_blk_n_B = m_axi_gmem_BVALID;
    end else begin
        gmem_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        gmem_blk_n_W = m_axi_gmem_WREADY;
    end else begin
        gmem_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln107_fu_373_p2 == 1'd1)) & ~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln107_fu_373_p2 == 1'd1)))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln107_fu_379_p2 = (loc_fu_316 + 7'd1);

assign add_ln109_fu_428_p2 = (i_fu_312 + 32'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((1'b1 == ap_block_state9_pp0_stage0_iter7) & (ap_enable_reg_pp0_iter7 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((ap_enable_reg_pp0_iter2 == 1'b1) & (gmem_WREADY == 1'b0)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state3_io)) | ((1'b1 == ap_block_state9_pp0_stage0_iter7) & (ap_enable_reg_pp0_iter7 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((ap_enable_reg_pp0_iter2 == 1'b1) & (gmem_WREADY == 1'b0)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state3_io)) | ((1'b1 == ap_block_state9_pp0_stage0_iter7) & (ap_enable_reg_pp0_iter7 == 1'b1)));
end

always @ (*) begin
    ap_block_state3_io = ((first_iter_0_reg_342 == 1'd1) & (gmem_AWREADY == 1'b0));
end

always @ (*) begin
    ap_block_state9_pp0_stage0_iter7 = ((gmem_BVALID == 1'b0) & (icmp_ln107_1_reg_1052_pp0_iter6_reg == 1'd1));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign gmem_WDATA = $signed(tmp_s_reg_1062);

assign i_1_fu_446_p3 = ((icmp_ln109_fu_422_p2[0:0] == 1'b1) ? add_ln109_fu_428_p2 : i_fu_312);

assign icmp_ln107_1_fu_385_p2 = ((add_ln107_fu_379_p2 == 7'd100) ? 1'b1 : 1'b0);

assign icmp_ln107_fu_373_p2 = ((loc_fu_316 == 7'd100) ? 1'b1 : 1'b0);

assign icmp_ln109_fu_422_p2 = ((j_fu_308 == 32'd10) ? 1'b1 : 1'b0);

assign j_1_fu_434_p3 = ((icmp_ln109_fu_422_p2[0:0] == 1'b1) ? 32'd0 : j_fu_308);

assign j_2_fu_1002_p2 = (j_1_fu_434_p3 + 32'd1);

assign sext_ln107_fu_405_p1 = $signed(trunc_ln_fu_396_p4);

assign tmp_1_fu_510_p21 = 'bx;

assign tmp_2_fu_562_p21 = 'bx;

assign tmp_3_fu_614_p21 = 'bx;

assign tmp_4_fu_662_p21 = 'bx;

assign tmp_5_fu_710_p21 = 'bx;

assign tmp_6_fu_758_p21 = 'bx;

assign tmp_7_fu_806_p21 = 'bx;

assign tmp_8_fu_858_p21 = 'bx;

assign tmp_9_fu_906_p21 = 'bx;

assign tmp_s_fu_954_p16 = $signed(tmp_7_fu_806_p23);

assign tmp_s_fu_954_p2 = zext_ln110_cast_fu_458_p23;

assign tmp_s_fu_954_p21 = 'bx;

assign tmp_s_fu_954_p22 = i_1_fu_446_p3[3:0];

assign tmp_s_fu_954_p4 = $signed(tmp_1_fu_510_p23);

assign tmp_s_fu_954_p6 = $signed(tmp_2_fu_562_p23);

assign trunc_ln109_fu_442_p1 = j_1_fu_434_p3[3:0];

assign trunc_ln_fu_396_p4 = {{output_r_read_reg_1043[63:2]}};

assign zext_ln110_cast_fu_458_p21 = 'bx;

endmodule //mmult
