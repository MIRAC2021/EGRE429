-- ==============================================================
-- Generated by Vitis HLS v2023.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity mmult is
generic (
    C_M_AXI_GMEM_ADDR_WIDTH : INTEGER := 64;
    C_M_AXI_GMEM_ID_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_GMEM_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_BUSER_WIDTH : INTEGER := 1;
    C_S_AXI_CONTROL_ADDR_WIDTH : INTEGER := 5;
    C_S_AXI_CONTROL_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_GMEM_USER_VALUE : INTEGER := 0;
    C_M_AXI_GMEM_PROT_VALUE : INTEGER := 0;
    C_M_AXI_GMEM_CACHE_VALUE : INTEGER := 3 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    m_axi_gmem_AWVALID : OUT STD_LOGIC;
    m_axi_gmem_AWREADY : IN STD_LOGIC;
    m_axi_gmem_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ADDR_WIDTH-1 downto 0);
    m_axi_gmem_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_AWUSER_WIDTH-1 downto 0);
    m_axi_gmem_WVALID : OUT STD_LOGIC;
    m_axi_gmem_WREADY : IN STD_LOGIC;
    m_axi_gmem_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_DATA_WIDTH-1 downto 0);
    m_axi_gmem_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_DATA_WIDTH/8-1 downto 0);
    m_axi_gmem_WLAST : OUT STD_LOGIC;
    m_axi_gmem_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_WUSER_WIDTH-1 downto 0);
    m_axi_gmem_ARVALID : OUT STD_LOGIC;
    m_axi_gmem_ARREADY : IN STD_LOGIC;
    m_axi_gmem_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ADDR_WIDTH-1 downto 0);
    m_axi_gmem_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ARUSER_WIDTH-1 downto 0);
    m_axi_gmem_RVALID : IN STD_LOGIC;
    m_axi_gmem_RREADY : OUT STD_LOGIC;
    m_axi_gmem_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_DATA_WIDTH-1 downto 0);
    m_axi_gmem_RLAST : IN STD_LOGIC;
    m_axi_gmem_RID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_RUSER_WIDTH-1 downto 0);
    m_axi_gmem_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_BVALID : IN STD_LOGIC;
    m_axi_gmem_BREADY : OUT STD_LOGIC;
    m_axi_gmem_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_BID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_BUSER_WIDTH-1 downto 0);
    s_axi_control_AWVALID : IN STD_LOGIC;
    s_axi_control_AWREADY : OUT STD_LOGIC;
    s_axi_control_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_WVALID : IN STD_LOGIC;
    s_axi_control_WREADY : OUT STD_LOGIC;
    s_axi_control_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH/8-1 downto 0);
    s_axi_control_ARVALID : IN STD_LOGIC;
    s_axi_control_ARREADY : OUT STD_LOGIC;
    s_axi_control_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_RVALID : OUT STD_LOGIC;
    s_axi_control_RREADY : IN STD_LOGIC;
    s_axi_control_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_control_BVALID : OUT STD_LOGIC;
    s_axi_control_BREADY : IN STD_LOGIC;
    s_axi_control_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of mmult is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "mmult_mmult,hls_ip_2023_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z010-clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.750000,HLS_SYN_LAT=108,HLS_SYN_TPT=none,HLS_SYN_MEM=10,HLS_SYN_DSP=0,HLS_SYN_FF=1169,HLS_SYN_LUT=1849,HLS_VERSION=2023_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant C_S_AXI_DATA_WIDTH : INTEGER := 32;
    constant C_M_AXI_DATA_WIDTH : INTEGER := 32;
    constant ap_const_lv32_64 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100100";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv7_64 : STD_LOGIC_VECTOR (6 downto 0) := "1100100";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv15_219C : STD_LOGIC_VECTOR (14 downto 0) := "010000110011100";
    constant ap_const_lv15_4FD : STD_LOGIC_VECTOR (14 downto 0) := "000010011111101";
    constant ap_const_lv15_10B7 : STD_LOGIC_VECTOR (14 downto 0) := "001000010110111";
    constant ap_const_lv15_4931 : STD_LOGIC_VECTOR (14 downto 0) := "100100100110001";
    constant ap_const_lv15_3436 : STD_LOGIC_VECTOR (14 downto 0) := "011010000110110";
    constant ap_const_lv15_4053 : STD_LOGIC_VECTOR (14 downto 0) := "100000001010011";
    constant ap_const_lv15_461 : STD_LOGIC_VECTOR (14 downto 0) := "000010001100001";
    constant ap_const_lv15_35D3 : STD_LOGIC_VECTOR (14 downto 0) := "011010111010011";
    constant ap_const_lv15_4AB : STD_LOGIC_VECTOR (14 downto 0) := "000010010101011";
    constant ap_const_lv15_850 : STD_LOGIC_VECTOR (14 downto 0) := "000100001010000";
    constant ap_const_lv15_1B79 : STD_LOGIC_VECTOR (14 downto 0) := "001101101111001";
    constant ap_const_lv15_7CE9 : STD_LOGIC_VECTOR (14 downto 0) := "111110011101001";
    constant ap_const_lv15_135F : STD_LOGIC_VECTOR (14 downto 0) := "001001101011111";
    constant ap_const_lv15_1D00 : STD_LOGIC_VECTOR (14 downto 0) := "001110100000000";
    constant ap_const_lv15_ED9 : STD_LOGIC_VECTOR (14 downto 0) := "000111011011001";
    constant ap_const_lv15_10AC : STD_LOGIC_VECTOR (14 downto 0) := "001000010101100";
    constant ap_const_lv15_7C63 : STD_LOGIC_VECTOR (14 downto 0) := "111110001100011";
    constant ap_const_lv15_7F2D : STD_LOGIC_VECTOR (14 downto 0) := "111111100101101";
    constant ap_const_lv15_6111 : STD_LOGIC_VECTOR (14 downto 0) := "110000100010001";
    constant ap_const_lv15_59F2 : STD_LOGIC_VECTOR (14 downto 0) := "101100111110010";
    constant ap_const_lv15_3DE8 : STD_LOGIC_VECTOR (14 downto 0) := "011110111101000";
    constant ap_const_lv15_5840 : STD_LOGIC_VECTOR (14 downto 0) := "101100001000000";
    constant ap_const_lv15_725 : STD_LOGIC_VECTOR (14 downto 0) := "000011100100101";
    constant ap_const_lv15_AB : STD_LOGIC_VECTOR (14 downto 0) := "000000010101011";
    constant ap_const_lv15_6F1B : STD_LOGIC_VECTOR (14 downto 0) := "110111100011011";
    constant ap_const_lv15_1BA5 : STD_LOGIC_VECTOR (14 downto 0) := "001101110100101";
    constant ap_const_lv15_62FB : STD_LOGIC_VECTOR (14 downto 0) := "110001011111011";
    constant ap_const_lv15_3CA0 : STD_LOGIC_VECTOR (14 downto 0) := "011110010100000";
    constant ap_const_lv15_84C : STD_LOGIC_VECTOR (14 downto 0) := "000100001001100";
    constant ap_const_lv15_28FB : STD_LOGIC_VECTOR (14 downto 0) := "010100011111011";
    constant ap_const_lv16_DD39 : STD_LOGIC_VECTOR (15 downto 0) := "1101110100111001";
    constant ap_const_lv16_1627 : STD_LOGIC_VECTOR (15 downto 0) := "0001011000100111";
    constant ap_const_lv16_2AEB : STD_LOGIC_VECTOR (15 downto 0) := "0010101011101011";
    constant ap_const_lv16_37C5 : STD_LOGIC_VECTOR (15 downto 0) := "0011011111000101";
    constant ap_const_lv16_27FF : STD_LOGIC_VECTOR (15 downto 0) := "0010011111111111";
    constant ap_const_lv16_1A36 : STD_LOGIC_VECTOR (15 downto 0) := "0001101000110110";
    constant ap_const_lv16_72 : STD_LOGIC_VECTOR (15 downto 0) := "0000000001110010";
    constant ap_const_lv16_EF29 : STD_LOGIC_VECTOR (15 downto 0) := "1110111100101001";
    constant ap_const_lv16_3587 : STD_LOGIC_VECTOR (15 downto 0) := "0011010110000111";
    constant ap_const_lv16_6098 : STD_LOGIC_VECTOR (15 downto 0) := "0110000010011000";
    constant ap_const_lv16_4F2F : STD_LOGIC_VECTOR (15 downto 0) := "0100111100101111";
    constant ap_const_lv16_BE4 : STD_LOGIC_VECTOR (15 downto 0) := "0000101111100100";
    constant ap_const_lv16_6713 : STD_LOGIC_VECTOR (15 downto 0) := "0110011100010011";
    constant ap_const_lv16_13B7 : STD_LOGIC_VECTOR (15 downto 0) := "0001001110110111";
    constant ap_const_lv16_FF23 : STD_LOGIC_VECTOR (15 downto 0) := "1111111100100011";
    constant ap_const_lv16_F68E : STD_LOGIC_VECTOR (15 downto 0) := "1111011010001110";
    constant ap_const_lv16_A16F : STD_LOGIC_VECTOR (15 downto 0) := "1010000101101111";
    constant ap_const_lv16_F70E : STD_LOGIC_VECTOR (15 downto 0) := "1111011100001110";
    constant ap_const_lv16_A3E : STD_LOGIC_VECTOR (15 downto 0) := "0000101000111110";
    constant ap_const_lv16_FF56 : STD_LOGIC_VECTOR (15 downto 0) := "1111111101010110";
    constant ap_const_lv16_C6CA : STD_LOGIC_VECTOR (15 downto 0) := "1100011011001010";
    constant ap_const_lv16_1861 : STD_LOGIC_VECTOR (15 downto 0) := "0001100001100001";
    constant ap_const_lv16_DC91 : STD_LOGIC_VECTOR (15 downto 0) := "1101110010010001";
    constant ap_const_lv16_1FE0 : STD_LOGIC_VECTOR (15 downto 0) := "0001111111100000";
    constant ap_const_lv16_33A0 : STD_LOGIC_VECTOR (15 downto 0) := "0011001110100000";
    constant ap_const_lv16_2CE0 : STD_LOGIC_VECTOR (15 downto 0) := "0010110011100000";
    constant ap_const_lv16_112C : STD_LOGIC_VECTOR (15 downto 0) := "0001000100101100";
    constant ap_const_lv16_1DFD : STD_LOGIC_VECTOR (15 downto 0) := "0001110111111101";
    constant ap_const_lv16_400D : STD_LOGIC_VECTOR (15 downto 0) := "0100000000001101";
    constant ap_const_lv16_42EB : STD_LOGIC_VECTOR (15 downto 0) := "0100001011101011";
    constant ap_const_lv16_13FB : STD_LOGIC_VECTOR (15 downto 0) := "0001001111111011";
    constant ap_const_lv16_162F : STD_LOGIC_VECTOR (15 downto 0) := "0001011000101111";
    constant ap_const_lv16_49E8 : STD_LOGIC_VECTOR (15 downto 0) := "0100100111101000";
    constant ap_const_lv16_13B8 : STD_LOGIC_VECTOR (15 downto 0) := "0001001110111000";
    constant ap_const_lv16_440 : STD_LOGIC_VECTOR (15 downto 0) := "0000010001000000";
    constant ap_const_lv16_FFE7 : STD_LOGIC_VECTOR (15 downto 0) := "1111111111100111";
    constant ap_const_lv16_D844 : STD_LOGIC_VECTOR (15 downto 0) := "1101100001000100";
    constant ap_const_lv16_F8ED : STD_LOGIC_VECTOR (15 downto 0) := "1111100011101101";
    constant ap_const_lv16_9FF : STD_LOGIC_VECTOR (15 downto 0) := "0000100111111111";
    constant ap_const_lv16_E16 : STD_LOGIC_VECTOR (15 downto 0) := "0000111000010110";
    constant ap_const_lv15_6C87 : STD_LOGIC_VECTOR (14 downto 0) := "110110010000111";
    constant ap_const_lv15_7332 : STD_LOGIC_VECTOR (14 downto 0) := "111001100110010";
    constant ap_const_lv15_6C9E : STD_LOGIC_VECTOR (14 downto 0) := "110110010011110";
    constant ap_const_lv15_7A62 : STD_LOGIC_VECTOR (14 downto 0) := "111101001100010";
    constant ap_const_lv15_D75 : STD_LOGIC_VECTOR (14 downto 0) := "000110101110101";
    constant ap_const_lv15_6EA : STD_LOGIC_VECTOR (14 downto 0) := "000011011101010";
    constant ap_const_lv15_2001 : STD_LOGIC_VECTOR (14 downto 0) := "010000000000001";
    constant ap_const_lv15_7717 : STD_LOGIC_VECTOR (14 downto 0) := "111011100010111";
    constant ap_const_lv15_1111 : STD_LOGIC_VECTOR (14 downto 0) := "001000100010001";
    constant ap_const_lv15_216B : STD_LOGIC_VECTOR (14 downto 0) := "010000101101011";
    constant ap_const_lv16_C9C9 : STD_LOGIC_VECTOR (15 downto 0) := "1100100111001001";
    constant ap_const_lv16_3151 : STD_LOGIC_VECTOR (15 downto 0) := "0011000101010001";
    constant ap_const_lv16_E072 : STD_LOGIC_VECTOR (15 downto 0) := "1110000001110010";
    constant ap_const_lv16_2062 : STD_LOGIC_VECTOR (15 downto 0) := "0010000001100010";
    constant ap_const_lv16_E5EE : STD_LOGIC_VECTOR (15 downto 0) := "1110010111101110";
    constant ap_const_lv16_D169 : STD_LOGIC_VECTOR (15 downto 0) := "1101000101101001";
    constant ap_const_lv16_F833 : STD_LOGIC_VECTOR (15 downto 0) := "1111100000110011";
    constant ap_const_lv16_5452 : STD_LOGIC_VECTOR (15 downto 0) := "0101010001010010";
    constant ap_const_lv16_5076 : STD_LOGIC_VECTOR (15 downto 0) := "0101000001110110";
    constant ap_const_lv16_3527 : STD_LOGIC_VECTOR (15 downto 0) := "0011010100100111";
    constant ap_const_lv16_34BE : STD_LOGIC_VECTOR (15 downto 0) := "0011010010111110";
    constant ap_const_lv16_BB04 : STD_LOGIC_VECTOR (15 downto 0) := "1011101100000100";
    constant ap_const_lv16_DE40 : STD_LOGIC_VECTOR (15 downto 0) := "1101111001000000";
    constant ap_const_lv16_BFC3 : STD_LOGIC_VECTOR (15 downto 0) := "1011111111000011";
    constant ap_const_lv16_15B0 : STD_LOGIC_VECTOR (15 downto 0) := "0001010110110000";
    constant ap_const_lv16_388E : STD_LOGIC_VECTOR (15 downto 0) := "0011100010001110";
    constant ap_const_lv16_A74 : STD_LOGIC_VECTOR (15 downto 0) := "0000101001110100";
    constant ap_const_lv16_D5C8 : STD_LOGIC_VECTOR (15 downto 0) := "1101010111001000";
    constant ap_const_lv16_C602 : STD_LOGIC_VECTOR (15 downto 0) := "1100011000000010";
    constant ap_const_lv16_DCDB : STD_LOGIC_VECTOR (15 downto 0) := "1101110011011011";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal output_r : STD_LOGIC_VECTOR (63 downto 0);
    signal gmem_blk_n_AW : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal first_iter_0_reg_342 : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_blk_n_W : STD_LOGIC;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal gmem_blk_n_B : STD_LOGIC;
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal icmp_ln107_1_reg_1052 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln107_1_reg_1052_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal output_r_read_reg_1043 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln107_fu_373_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln107_reg_1048 : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_AWVALID : STD_LOGIC;
    signal gmem_AWREADY : STD_LOGIC;
    signal gmem_WVALID : STD_LOGIC;
    signal gmem_WREADY : STD_LOGIC;
    signal gmem_WDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem_ARREADY : STD_LOGIC;
    signal gmem_RVALID : STD_LOGIC;
    signal gmem_RDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem_RFIFONUM : STD_LOGIC_VECTOR (8 downto 0);
    signal gmem_BVALID : STD_LOGIC;
    signal gmem_BREADY : STD_LOGIC;
    signal ap_block_state3_io : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln107_1_fu_385_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln107_1_reg_1052_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln107_1_reg_1052_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln107_1_reg_1052_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln107_1_reg_1052_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln107_1_reg_1052_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_s_fu_954_p23 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_s_reg_1062 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state2 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal sext_ln107_fu_405_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal j_fu_308 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal j_2_fu_1002_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_fu_312 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal i_1_fu_446_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal loc_fu_316 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    signal add_ln107_fu_379_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal trunc_ln_fu_396_p4 : STD_LOGIC_VECTOR (61 downto 0);
    signal icmp_ln109_fu_422_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_1_fu_434_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln109_fu_428_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln110_cast_fu_458_p21 : STD_LOGIC_VECTOR (14 downto 0);
    signal trunc_ln109_fu_442_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln110_cast_fu_458_p23 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_1_fu_510_p21 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_1_fu_510_p23 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_2_fu_562_p21 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_2_fu_562_p23 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_3_fu_614_p21 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_4_fu_662_p21 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_5_fu_710_p21 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_6_fu_758_p21 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_7_fu_806_p21 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_7_fu_806_p23 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_8_fu_858_p21 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_9_fu_906_p21 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_s_fu_954_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_s_fu_954_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_s_fu_954_p6 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_3_fu_614_p23 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_4_fu_662_p23 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_5_fu_710_p23 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_6_fu_758_p23 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_s_fu_954_p16 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_8_fu_858_p23 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_9_fu_906_p23 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_s_fu_954_p21 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_s_fu_954_p22 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state10_blk : STD_LOGIC;
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal zext_ln110_cast_fu_458_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln110_cast_fu_458_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln110_cast_fu_458_p5 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln110_cast_fu_458_p7 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln110_cast_fu_458_p9 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln110_cast_fu_458_p11 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln110_cast_fu_458_p13 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln110_cast_fu_458_p15 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln110_cast_fu_458_p17 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln110_cast_fu_458_p19 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_1_fu_510_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_1_fu_510_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_1_fu_510_p5 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_1_fu_510_p7 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_1_fu_510_p9 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_1_fu_510_p11 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_1_fu_510_p13 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_1_fu_510_p15 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_1_fu_510_p17 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_1_fu_510_p19 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_2_fu_562_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_2_fu_562_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_2_fu_562_p5 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_2_fu_562_p7 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_2_fu_562_p9 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_2_fu_562_p11 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_2_fu_562_p13 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_2_fu_562_p15 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_2_fu_562_p17 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_2_fu_562_p19 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_3_fu_614_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_3_fu_614_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_3_fu_614_p5 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_3_fu_614_p7 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_3_fu_614_p9 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_3_fu_614_p11 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_3_fu_614_p13 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_3_fu_614_p15 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_3_fu_614_p17 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_3_fu_614_p19 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_4_fu_662_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_4_fu_662_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_4_fu_662_p5 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_4_fu_662_p7 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_4_fu_662_p9 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_4_fu_662_p11 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_4_fu_662_p13 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_4_fu_662_p15 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_4_fu_662_p17 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_4_fu_662_p19 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_5_fu_710_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_5_fu_710_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_5_fu_710_p5 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_5_fu_710_p7 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_5_fu_710_p9 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_5_fu_710_p11 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_5_fu_710_p13 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_5_fu_710_p15 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_5_fu_710_p17 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_5_fu_710_p19 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_6_fu_758_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_6_fu_758_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_6_fu_758_p5 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_6_fu_758_p7 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_6_fu_758_p9 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_6_fu_758_p11 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_6_fu_758_p13 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_6_fu_758_p15 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_6_fu_758_p17 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_6_fu_758_p19 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_7_fu_806_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_7_fu_806_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_7_fu_806_p5 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_7_fu_806_p7 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_7_fu_806_p9 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_7_fu_806_p11 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_7_fu_806_p13 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_7_fu_806_p15 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_7_fu_806_p17 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_7_fu_806_p19 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_8_fu_858_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_8_fu_858_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_8_fu_858_p5 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_8_fu_858_p7 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_8_fu_858_p9 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_8_fu_858_p11 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_8_fu_858_p13 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_8_fu_858_p15 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_8_fu_858_p17 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_8_fu_858_p19 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_9_fu_906_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_9_fu_906_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_9_fu_906_p5 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_9_fu_906_p7 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_9_fu_906_p9 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_9_fu_906_p11 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_9_fu_906_p13 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_9_fu_906_p15 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_9_fu_906_p17 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_9_fu_906_p19 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_s_fu_954_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_s_fu_954_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_s_fu_954_p5 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_s_fu_954_p7 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_s_fu_954_p9 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_s_fu_954_p11 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_s_fu_954_p13 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_s_fu_954_p15 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_s_fu_954_p17 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_s_fu_954_p19 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component mmult_sparsemux_21_4_15_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        CASE0 : STD_LOGIC_VECTOR (3 downto 0);
        din0_WIDTH : INTEGER;
        CASE1 : STD_LOGIC_VECTOR (3 downto 0);
        din1_WIDTH : INTEGER;
        CASE2 : STD_LOGIC_VECTOR (3 downto 0);
        din2_WIDTH : INTEGER;
        CASE3 : STD_LOGIC_VECTOR (3 downto 0);
        din3_WIDTH : INTEGER;
        CASE4 : STD_LOGIC_VECTOR (3 downto 0);
        din4_WIDTH : INTEGER;
        CASE5 : STD_LOGIC_VECTOR (3 downto 0);
        din5_WIDTH : INTEGER;
        CASE6 : STD_LOGIC_VECTOR (3 downto 0);
        din6_WIDTH : INTEGER;
        CASE7 : STD_LOGIC_VECTOR (3 downto 0);
        din7_WIDTH : INTEGER;
        CASE8 : STD_LOGIC_VECTOR (3 downto 0);
        din8_WIDTH : INTEGER;
        CASE9 : STD_LOGIC_VECTOR (3 downto 0);
        din9_WIDTH : INTEGER;
        def_WIDTH : INTEGER;
        sel_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (14 downto 0);
        din1 : IN STD_LOGIC_VECTOR (14 downto 0);
        din2 : IN STD_LOGIC_VECTOR (14 downto 0);
        din3 : IN STD_LOGIC_VECTOR (14 downto 0);
        din4 : IN STD_LOGIC_VECTOR (14 downto 0);
        din5 : IN STD_LOGIC_VECTOR (14 downto 0);
        din6 : IN STD_LOGIC_VECTOR (14 downto 0);
        din7 : IN STD_LOGIC_VECTOR (14 downto 0);
        din8 : IN STD_LOGIC_VECTOR (14 downto 0);
        din9 : IN STD_LOGIC_VECTOR (14 downto 0);
        def : IN STD_LOGIC_VECTOR (14 downto 0);
        sel : IN STD_LOGIC_VECTOR (3 downto 0);
        dout : OUT STD_LOGIC_VECTOR (14 downto 0) );
    end component;


    component mmult_sparsemux_21_4_16_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        CASE0 : STD_LOGIC_VECTOR (3 downto 0);
        din0_WIDTH : INTEGER;
        CASE1 : STD_LOGIC_VECTOR (3 downto 0);
        din1_WIDTH : INTEGER;
        CASE2 : STD_LOGIC_VECTOR (3 downto 0);
        din2_WIDTH : INTEGER;
        CASE3 : STD_LOGIC_VECTOR (3 downto 0);
        din3_WIDTH : INTEGER;
        CASE4 : STD_LOGIC_VECTOR (3 downto 0);
        din4_WIDTH : INTEGER;
        CASE5 : STD_LOGIC_VECTOR (3 downto 0);
        din5_WIDTH : INTEGER;
        CASE6 : STD_LOGIC_VECTOR (3 downto 0);
        din6_WIDTH : INTEGER;
        CASE7 : STD_LOGIC_VECTOR (3 downto 0);
        din7_WIDTH : INTEGER;
        CASE8 : STD_LOGIC_VECTOR (3 downto 0);
        din8_WIDTH : INTEGER;
        CASE9 : STD_LOGIC_VECTOR (3 downto 0);
        din9_WIDTH : INTEGER;
        def_WIDTH : INTEGER;
        sel_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        din2 : IN STD_LOGIC_VECTOR (15 downto 0);
        din3 : IN STD_LOGIC_VECTOR (15 downto 0);
        din4 : IN STD_LOGIC_VECTOR (15 downto 0);
        din5 : IN STD_LOGIC_VECTOR (15 downto 0);
        din6 : IN STD_LOGIC_VECTOR (15 downto 0);
        din7 : IN STD_LOGIC_VECTOR (15 downto 0);
        din8 : IN STD_LOGIC_VECTOR (15 downto 0);
        din9 : IN STD_LOGIC_VECTOR (15 downto 0);
        def : IN STD_LOGIC_VECTOR (15 downto 0);
        sel : IN STD_LOGIC_VECTOR (3 downto 0);
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component mmult_control_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        output_r : OUT STD_LOGIC_VECTOR (63 downto 0);
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC );
    end component;


    component mmult_gmem_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_MAXREQS : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER;
        USER_RFIFONUM_WIDTH : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        I_RFIFONUM : OUT STD_LOGIC_VECTOR (8 downto 0);
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC );
    end component;



begin
    control_s_axi_U : component mmult_control_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CONTROL_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CONTROL_DATA_WIDTH)
    port map (
        AWVALID => s_axi_control_AWVALID,
        AWREADY => s_axi_control_AWREADY,
        AWADDR => s_axi_control_AWADDR,
        WVALID => s_axi_control_WVALID,
        WREADY => s_axi_control_WREADY,
        WDATA => s_axi_control_WDATA,
        WSTRB => s_axi_control_WSTRB,
        ARVALID => s_axi_control_ARVALID,
        ARREADY => s_axi_control_ARREADY,
        ARADDR => s_axi_control_ARADDR,
        RVALID => s_axi_control_RVALID,
        RREADY => s_axi_control_RREADY,
        RDATA => s_axi_control_RDATA,
        RRESP => s_axi_control_RRESP,
        BVALID => s_axi_control_BVALID,
        BREADY => s_axi_control_BREADY,
        BRESP => s_axi_control_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        output_r => output_r,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle);

    gmem_m_axi_U : component mmult_gmem_m_axi
    generic map (
        CONSERVATIVE => 1,
        USER_MAXREQS => 4,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 256,
        C_M_AXI_ID_WIDTH => C_M_AXI_GMEM_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_GMEM_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_GMEM_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_GMEM_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_GMEM_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_GMEM_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_GMEM_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_GMEM_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_GMEM_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_GMEM_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_GMEM_CACHE_VALUE,
        USER_RFIFONUM_WIDTH => 9,
        USER_DW => 32,
        USER_AW => 64,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16)
    port map (
        AWVALID => m_axi_gmem_AWVALID,
        AWREADY => m_axi_gmem_AWREADY,
        AWADDR => m_axi_gmem_AWADDR,
        AWID => m_axi_gmem_AWID,
        AWLEN => m_axi_gmem_AWLEN,
        AWSIZE => m_axi_gmem_AWSIZE,
        AWBURST => m_axi_gmem_AWBURST,
        AWLOCK => m_axi_gmem_AWLOCK,
        AWCACHE => m_axi_gmem_AWCACHE,
        AWPROT => m_axi_gmem_AWPROT,
        AWQOS => m_axi_gmem_AWQOS,
        AWREGION => m_axi_gmem_AWREGION,
        AWUSER => m_axi_gmem_AWUSER,
        WVALID => m_axi_gmem_WVALID,
        WREADY => m_axi_gmem_WREADY,
        WDATA => m_axi_gmem_WDATA,
        WSTRB => m_axi_gmem_WSTRB,
        WLAST => m_axi_gmem_WLAST,
        WID => m_axi_gmem_WID,
        WUSER => m_axi_gmem_WUSER,
        ARVALID => m_axi_gmem_ARVALID,
        ARREADY => m_axi_gmem_ARREADY,
        ARADDR => m_axi_gmem_ARADDR,
        ARID => m_axi_gmem_ARID,
        ARLEN => m_axi_gmem_ARLEN,
        ARSIZE => m_axi_gmem_ARSIZE,
        ARBURST => m_axi_gmem_ARBURST,
        ARLOCK => m_axi_gmem_ARLOCK,
        ARCACHE => m_axi_gmem_ARCACHE,
        ARPROT => m_axi_gmem_ARPROT,
        ARQOS => m_axi_gmem_ARQOS,
        ARREGION => m_axi_gmem_ARREGION,
        ARUSER => m_axi_gmem_ARUSER,
        RVALID => m_axi_gmem_RVALID,
        RREADY => m_axi_gmem_RREADY,
        RDATA => m_axi_gmem_RDATA,
        RLAST => m_axi_gmem_RLAST,
        RID => m_axi_gmem_RID,
        RUSER => m_axi_gmem_RUSER,
        RRESP => m_axi_gmem_RRESP,
        BVALID => m_axi_gmem_BVALID,
        BREADY => m_axi_gmem_BREADY,
        BRESP => m_axi_gmem_BRESP,
        BID => m_axi_gmem_BID,
        BUSER => m_axi_gmem_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => ap_const_logic_0,
        I_ARREADY => gmem_ARREADY,
        I_ARADDR => ap_const_lv64_0,
        I_ARLEN => ap_const_lv32_0,
        I_RVALID => gmem_RVALID,
        I_RREADY => ap_const_logic_0,
        I_RDATA => gmem_RDATA,
        I_RFIFONUM => gmem_RFIFONUM,
        I_AWVALID => gmem_AWVALID,
        I_AWREADY => gmem_AWREADY,
        I_AWADDR => sext_ln107_fu_405_p1,
        I_AWLEN => ap_const_lv32_64,
        I_WVALID => gmem_WVALID,
        I_WREADY => gmem_WREADY,
        I_WDATA => gmem_WDATA,
        I_WSTRB => ap_const_lv4_F,
        I_BVALID => gmem_BVALID,
        I_BREADY => gmem_BREADY);

    sparsemux_21_4_15_1_1_U1 : component mmult_sparsemux_21_4_15_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        CASE0 => "0000",
        din0_WIDTH => 15,
        CASE1 => "0001",
        din1_WIDTH => 15,
        CASE2 => "0010",
        din2_WIDTH => 15,
        CASE3 => "0011",
        din3_WIDTH => 15,
        CASE4 => "0100",
        din4_WIDTH => 15,
        CASE5 => "0101",
        din5_WIDTH => 15,
        CASE6 => "0110",
        din6_WIDTH => 15,
        CASE7 => "0111",
        din7_WIDTH => 15,
        CASE8 => "1000",
        din8_WIDTH => 15,
        CASE9 => "1001",
        din9_WIDTH => 15,
        def_WIDTH => 15,
        sel_WIDTH => 4,
        dout_WIDTH => 15)
    port map (
        din0 => ap_const_lv15_219C,
        din1 => ap_const_lv15_4FD,
        din2 => ap_const_lv15_10B7,
        din3 => ap_const_lv15_4931,
        din4 => ap_const_lv15_3436,
        din5 => ap_const_lv15_4053,
        din6 => ap_const_lv15_461,
        din7 => ap_const_lv15_35D3,
        din8 => ap_const_lv15_4AB,
        din9 => ap_const_lv15_850,
        def => zext_ln110_cast_fu_458_p21,
        sel => trunc_ln109_fu_442_p1,
        dout => zext_ln110_cast_fu_458_p23);

    sparsemux_21_4_15_1_1_U2 : component mmult_sparsemux_21_4_15_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        CASE0 => "0000",
        din0_WIDTH => 15,
        CASE1 => "0001",
        din1_WIDTH => 15,
        CASE2 => "0010",
        din2_WIDTH => 15,
        CASE3 => "0011",
        din3_WIDTH => 15,
        CASE4 => "0100",
        din4_WIDTH => 15,
        CASE5 => "0101",
        din5_WIDTH => 15,
        CASE6 => "0110",
        din6_WIDTH => 15,
        CASE7 => "0111",
        din7_WIDTH => 15,
        CASE8 => "1000",
        din8_WIDTH => 15,
        CASE9 => "1001",
        din9_WIDTH => 15,
        def_WIDTH => 15,
        sel_WIDTH => 4,
        dout_WIDTH => 15)
    port map (
        din0 => ap_const_lv15_1B79,
        din1 => ap_const_lv15_7CE9,
        din2 => ap_const_lv15_135F,
        din3 => ap_const_lv15_1D00,
        din4 => ap_const_lv15_ED9,
        din5 => ap_const_lv15_10AC,
        din6 => ap_const_lv15_7C63,
        din7 => ap_const_lv15_7F2D,
        din8 => ap_const_lv15_6111,
        din9 => ap_const_lv15_59F2,
        def => tmp_1_fu_510_p21,
        sel => trunc_ln109_fu_442_p1,
        dout => tmp_1_fu_510_p23);

    sparsemux_21_4_15_1_1_U3 : component mmult_sparsemux_21_4_15_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        CASE0 => "0000",
        din0_WIDTH => 15,
        CASE1 => "0001",
        din1_WIDTH => 15,
        CASE2 => "0010",
        din2_WIDTH => 15,
        CASE3 => "0011",
        din3_WIDTH => 15,
        CASE4 => "0100",
        din4_WIDTH => 15,
        CASE5 => "0101",
        din5_WIDTH => 15,
        CASE6 => "0110",
        din6_WIDTH => 15,
        CASE7 => "0111",
        din7_WIDTH => 15,
        CASE8 => "1000",
        din8_WIDTH => 15,
        CASE9 => "1001",
        din9_WIDTH => 15,
        def_WIDTH => 15,
        sel_WIDTH => 4,
        dout_WIDTH => 15)
    port map (
        din0 => ap_const_lv15_3DE8,
        din1 => ap_const_lv15_5840,
        din2 => ap_const_lv15_725,
        din3 => ap_const_lv15_AB,
        din4 => ap_const_lv15_6F1B,
        din5 => ap_const_lv15_1BA5,
        din6 => ap_const_lv15_62FB,
        din7 => ap_const_lv15_3CA0,
        din8 => ap_const_lv15_84C,
        din9 => ap_const_lv15_28FB,
        def => tmp_2_fu_562_p21,
        sel => trunc_ln109_fu_442_p1,
        dout => tmp_2_fu_562_p23);

    sparsemux_21_4_16_1_1_U4 : component mmult_sparsemux_21_4_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        CASE0 => "0000",
        din0_WIDTH => 16,
        CASE1 => "0001",
        din1_WIDTH => 16,
        CASE2 => "0010",
        din2_WIDTH => 16,
        CASE3 => "0011",
        din3_WIDTH => 16,
        CASE4 => "0100",
        din4_WIDTH => 16,
        CASE5 => "0101",
        din5_WIDTH => 16,
        CASE6 => "0110",
        din6_WIDTH => 16,
        CASE7 => "0111",
        din7_WIDTH => 16,
        CASE8 => "1000",
        din8_WIDTH => 16,
        CASE9 => "1001",
        din9_WIDTH => 16,
        def_WIDTH => 16,
        sel_WIDTH => 4,
        dout_WIDTH => 16)
    port map (
        din0 => ap_const_lv16_DD39,
        din1 => ap_const_lv16_1627,
        din2 => ap_const_lv16_2AEB,
        din3 => ap_const_lv16_37C5,
        din4 => ap_const_lv16_27FF,
        din5 => ap_const_lv16_1A36,
        din6 => ap_const_lv16_72,
        din7 => ap_const_lv16_EF29,
        din8 => ap_const_lv16_3587,
        din9 => ap_const_lv16_6098,
        def => tmp_3_fu_614_p21,
        sel => trunc_ln109_fu_442_p1,
        dout => tmp_3_fu_614_p23);

    sparsemux_21_4_16_1_1_U5 : component mmult_sparsemux_21_4_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        CASE0 => "0000",
        din0_WIDTH => 16,
        CASE1 => "0001",
        din1_WIDTH => 16,
        CASE2 => "0010",
        din2_WIDTH => 16,
        CASE3 => "0011",
        din3_WIDTH => 16,
        CASE4 => "0100",
        din4_WIDTH => 16,
        CASE5 => "0101",
        din5_WIDTH => 16,
        CASE6 => "0110",
        din6_WIDTH => 16,
        CASE7 => "0111",
        din7_WIDTH => 16,
        CASE8 => "1000",
        din8_WIDTH => 16,
        CASE9 => "1001",
        din9_WIDTH => 16,
        def_WIDTH => 16,
        sel_WIDTH => 4,
        dout_WIDTH => 16)
    port map (
        din0 => ap_const_lv16_4F2F,
        din1 => ap_const_lv16_BE4,
        din2 => ap_const_lv16_6713,
        din3 => ap_const_lv16_13B7,
        din4 => ap_const_lv16_FF23,
        din5 => ap_const_lv16_F68E,
        din6 => ap_const_lv16_A16F,
        din7 => ap_const_lv16_F70E,
        din8 => ap_const_lv16_A3E,
        din9 => ap_const_lv16_FF56,
        def => tmp_4_fu_662_p21,
        sel => trunc_ln109_fu_442_p1,
        dout => tmp_4_fu_662_p23);

    sparsemux_21_4_16_1_1_U6 : component mmult_sparsemux_21_4_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        CASE0 => "0000",
        din0_WIDTH => 16,
        CASE1 => "0001",
        din1_WIDTH => 16,
        CASE2 => "0010",
        din2_WIDTH => 16,
        CASE3 => "0011",
        din3_WIDTH => 16,
        CASE4 => "0100",
        din4_WIDTH => 16,
        CASE5 => "0101",
        din5_WIDTH => 16,
        CASE6 => "0110",
        din6_WIDTH => 16,
        CASE7 => "0111",
        din7_WIDTH => 16,
        CASE8 => "1000",
        din8_WIDTH => 16,
        CASE9 => "1001",
        din9_WIDTH => 16,
        def_WIDTH => 16,
        sel_WIDTH => 4,
        dout_WIDTH => 16)
    port map (
        din0 => ap_const_lv16_C6CA,
        din1 => ap_const_lv16_1861,
        din2 => ap_const_lv16_DC91,
        din3 => ap_const_lv16_1FE0,
        din4 => ap_const_lv16_33A0,
        din5 => ap_const_lv16_2CE0,
        din6 => ap_const_lv16_112C,
        din7 => ap_const_lv16_1DFD,
        din8 => ap_const_lv16_400D,
        din9 => ap_const_lv16_42EB,
        def => tmp_5_fu_710_p21,
        sel => trunc_ln109_fu_442_p1,
        dout => tmp_5_fu_710_p23);

    sparsemux_21_4_16_1_1_U7 : component mmult_sparsemux_21_4_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        CASE0 => "0000",
        din0_WIDTH => 16,
        CASE1 => "0001",
        din1_WIDTH => 16,
        CASE2 => "0010",
        din2_WIDTH => 16,
        CASE3 => "0011",
        din3_WIDTH => 16,
        CASE4 => "0100",
        din4_WIDTH => 16,
        CASE5 => "0101",
        din5_WIDTH => 16,
        CASE6 => "0110",
        din6_WIDTH => 16,
        CASE7 => "0111",
        din7_WIDTH => 16,
        CASE8 => "1000",
        din8_WIDTH => 16,
        CASE9 => "1001",
        din9_WIDTH => 16,
        def_WIDTH => 16,
        sel_WIDTH => 4,
        dout_WIDTH => 16)
    port map (
        din0 => ap_const_lv16_13FB,
        din1 => ap_const_lv16_162F,
        din2 => ap_const_lv16_49E8,
        din3 => ap_const_lv16_13B8,
        din4 => ap_const_lv16_440,
        din5 => ap_const_lv16_FFE7,
        din6 => ap_const_lv16_D844,
        din7 => ap_const_lv16_F8ED,
        din8 => ap_const_lv16_9FF,
        din9 => ap_const_lv16_E16,
        def => tmp_6_fu_758_p21,
        sel => trunc_ln109_fu_442_p1,
        dout => tmp_6_fu_758_p23);

    sparsemux_21_4_15_1_1_U8 : component mmult_sparsemux_21_4_15_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        CASE0 => "0000",
        din0_WIDTH => 15,
        CASE1 => "0001",
        din1_WIDTH => 15,
        CASE2 => "0010",
        din2_WIDTH => 15,
        CASE3 => "0011",
        din3_WIDTH => 15,
        CASE4 => "0100",
        din4_WIDTH => 15,
        CASE5 => "0101",
        din5_WIDTH => 15,
        CASE6 => "0110",
        din6_WIDTH => 15,
        CASE7 => "0111",
        din7_WIDTH => 15,
        CASE8 => "1000",
        din8_WIDTH => 15,
        CASE9 => "1001",
        din9_WIDTH => 15,
        def_WIDTH => 15,
        sel_WIDTH => 4,
        dout_WIDTH => 15)
    port map (
        din0 => ap_const_lv15_6C87,
        din1 => ap_const_lv15_7332,
        din2 => ap_const_lv15_6C9E,
        din3 => ap_const_lv15_7A62,
        din4 => ap_const_lv15_D75,
        din5 => ap_const_lv15_6EA,
        din6 => ap_const_lv15_2001,
        din7 => ap_const_lv15_7717,
        din8 => ap_const_lv15_1111,
        din9 => ap_const_lv15_216B,
        def => tmp_7_fu_806_p21,
        sel => trunc_ln109_fu_442_p1,
        dout => tmp_7_fu_806_p23);

    sparsemux_21_4_16_1_1_U9 : component mmult_sparsemux_21_4_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        CASE0 => "0000",
        din0_WIDTH => 16,
        CASE1 => "0001",
        din1_WIDTH => 16,
        CASE2 => "0010",
        din2_WIDTH => 16,
        CASE3 => "0011",
        din3_WIDTH => 16,
        CASE4 => "0100",
        din4_WIDTH => 16,
        CASE5 => "0101",
        din5_WIDTH => 16,
        CASE6 => "0110",
        din6_WIDTH => 16,
        CASE7 => "0111",
        din7_WIDTH => 16,
        CASE8 => "1000",
        din8_WIDTH => 16,
        CASE9 => "1001",
        din9_WIDTH => 16,
        def_WIDTH => 16,
        sel_WIDTH => 4,
        dout_WIDTH => 16)
    port map (
        din0 => ap_const_lv16_C9C9,
        din1 => ap_const_lv16_3151,
        din2 => ap_const_lv16_E072,
        din3 => ap_const_lv16_2062,
        din4 => ap_const_lv16_E5EE,
        din5 => ap_const_lv16_D169,
        din6 => ap_const_lv16_F833,
        din7 => ap_const_lv16_5452,
        din8 => ap_const_lv16_5076,
        din9 => ap_const_lv16_3527,
        def => tmp_8_fu_858_p21,
        sel => trunc_ln109_fu_442_p1,
        dout => tmp_8_fu_858_p23);

    sparsemux_21_4_16_1_1_U10 : component mmult_sparsemux_21_4_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        CASE0 => "0000",
        din0_WIDTH => 16,
        CASE1 => "0001",
        din1_WIDTH => 16,
        CASE2 => "0010",
        din2_WIDTH => 16,
        CASE3 => "0011",
        din3_WIDTH => 16,
        CASE4 => "0100",
        din4_WIDTH => 16,
        CASE5 => "0101",
        din5_WIDTH => 16,
        CASE6 => "0110",
        din6_WIDTH => 16,
        CASE7 => "0111",
        din7_WIDTH => 16,
        CASE8 => "1000",
        din8_WIDTH => 16,
        CASE9 => "1001",
        din9_WIDTH => 16,
        def_WIDTH => 16,
        sel_WIDTH => 4,
        dout_WIDTH => 16)
    port map (
        din0 => ap_const_lv16_34BE,
        din1 => ap_const_lv16_BB04,
        din2 => ap_const_lv16_DE40,
        din3 => ap_const_lv16_BFC3,
        din4 => ap_const_lv16_15B0,
        din5 => ap_const_lv16_388E,
        din6 => ap_const_lv16_A74,
        din7 => ap_const_lv16_D5C8,
        din8 => ap_const_lv16_C602,
        din9 => ap_const_lv16_DCDB,
        def => tmp_9_fu_906_p21,
        sel => trunc_ln109_fu_442_p1,
        dout => tmp_9_fu_906_p23);

    sparsemux_21_4_16_1_1_U11 : component mmult_sparsemux_21_4_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        CASE0 => "0000",
        din0_WIDTH => 16,
        CASE1 => "0001",
        din1_WIDTH => 16,
        CASE2 => "0010",
        din2_WIDTH => 16,
        CASE3 => "0011",
        din3_WIDTH => 16,
        CASE4 => "0100",
        din4_WIDTH => 16,
        CASE5 => "0101",
        din5_WIDTH => 16,
        CASE6 => "0110",
        din6_WIDTH => 16,
        CASE7 => "0111",
        din7_WIDTH => 16,
        CASE8 => "1000",
        din8_WIDTH => 16,
        CASE9 => "1001",
        din9_WIDTH => 16,
        def_WIDTH => 16,
        sel_WIDTH => 4,
        dout_WIDTH => 16)
    port map (
        din0 => tmp_s_fu_954_p2,
        din1 => tmp_s_fu_954_p4,
        din2 => tmp_s_fu_954_p6,
        din3 => tmp_3_fu_614_p23,
        din4 => tmp_4_fu_662_p23,
        din5 => tmp_5_fu_710_p23,
        din6 => tmp_6_fu_758_p23,
        din7 => tmp_s_fu_954_p16,
        din8 => tmp_8_fu_858_p23,
        din9 => tmp_9_fu_906_p23,
        def => tmp_s_fu_954_p21,
        sel => tmp_s_fu_954_p22,
        dout => tmp_s_fu_954_p23);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state2);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                    ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    first_iter_0_reg_342_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                first_iter_0_reg_342 <= ap_const_lv1_1;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln107_reg_1048 = ap_const_lv1_0))) then 
                first_iter_0_reg_342 <= ap_const_lv1_0;
            end if; 
        end if;
    end process;

    i_fu_312_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                i_fu_312 <= ap_const_lv32_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln107_reg_1048 = ap_const_lv1_0))) then 
                i_fu_312 <= i_1_fu_446_p3;
            end if; 
        end if;
    end process;

    j_fu_308_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                j_fu_308 <= ap_const_lv32_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln107_reg_1048 = ap_const_lv1_0))) then 
                j_fu_308 <= j_2_fu_1002_p2;
            end if; 
        end if;
    end process;

    loc_fu_316_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                loc_fu_316 <= ap_const_lv7_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln107_fu_373_p2 = ap_const_lv1_0))) then 
                loc_fu_316 <= add_ln107_fu_379_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln107_1_reg_1052 <= icmp_ln107_1_fu_385_p2;
                icmp_ln107_1_reg_1052_pp0_iter1_reg <= icmp_ln107_1_reg_1052;
                icmp_ln107_reg_1048 <= icmp_ln107_fu_373_p2;
                tmp_s_reg_1062 <= tmp_s_fu_954_p23;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                icmp_ln107_1_reg_1052_pp0_iter2_reg <= icmp_ln107_1_reg_1052_pp0_iter1_reg;
                icmp_ln107_1_reg_1052_pp0_iter3_reg <= icmp_ln107_1_reg_1052_pp0_iter2_reg;
                icmp_ln107_1_reg_1052_pp0_iter4_reg <= icmp_ln107_1_reg_1052_pp0_iter3_reg;
                icmp_ln107_1_reg_1052_pp0_iter5_reg <= icmp_ln107_1_reg_1052_pp0_iter4_reg;
                icmp_ln107_1_reg_1052_pp0_iter6_reg <= icmp_ln107_1_reg_1052_pp0_iter5_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                output_r_read_reg_1043 <= output_r;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter7, icmp_ln107_fu_373_p2, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter6)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln107_fu_373_p2 = ap_const_lv1_1))) and not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln107_fu_373_p2 = ap_const_lv1_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    add_ln107_fu_379_p2 <= std_logic_vector(unsigned(loc_fu_316) + unsigned(ap_const_lv7_1));
    add_ln109_fu_428_p2 <= std_logic_vector(unsigned(i_fu_312) + unsigned(ap_const_lv32_1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(2);
    ap_ST_fsm_state10_blk <= ap_const_logic_0;

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_enable_reg_pp0_iter7, ap_block_state9_pp0_stage0_iter7)
    begin
                ap_block_pp0_stage0_01001 <= ((ap_const_boolean_1 = ap_block_state9_pp0_stage0_iter7) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter7, gmem_WREADY, ap_block_state3_io, ap_block_state9_pp0_stage0_iter7)
    begin
                ap_block_pp0_stage0_11001 <= (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (gmem_WREADY = ap_const_logic_0)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state3_io)) or ((ap_const_boolean_1 = ap_block_state9_pp0_stage0_iter7) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter7, gmem_WREADY, ap_block_state3_io, ap_block_state9_pp0_stage0_iter7)
    begin
                ap_block_pp0_stage0_subdone <= (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (gmem_WREADY = ap_const_logic_0)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state3_io)) or ((ap_const_boolean_1 = ap_block_state9_pp0_stage0_iter7) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1)));
    end process;


    ap_block_state3_io_assign_proc : process(first_iter_0_reg_342, gmem_AWREADY)
    begin
                ap_block_state3_io <= ((first_iter_0_reg_342 = ap_const_lv1_1) and (gmem_AWREADY = ap_const_logic_0));
    end process;


    ap_block_state9_pp0_stage0_iter7_assign_proc : process(icmp_ln107_1_reg_1052_pp0_iter6_reg, gmem_BVALID)
    begin
                ap_block_state9_pp0_stage0_iter7 <= ((gmem_BVALID = ap_const_logic_0) and (icmp_ln107_1_reg_1052_pp0_iter6_reg = ap_const_lv1_1));
    end process;


    ap_condition_pp0_exit_iter0_state2_assign_proc : process(icmp_ln107_fu_373_p2)
    begin
        if ((icmp_ln107_fu_373_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;


    gmem_AWVALID_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, first_iter_0_reg_342, ap_block_pp0_stage0_11001)
    begin
        if (((first_iter_0_reg_342 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            gmem_AWVALID <= ap_const_logic_1;
        else 
            gmem_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    gmem_BREADY_assign_proc : process(ap_enable_reg_pp0_iter7, icmp_ln107_1_reg_1052_pp0_iter6_reg, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln107_1_reg_1052_pp0_iter6_reg = ap_const_lv1_1) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1))) then 
            gmem_BREADY <= ap_const_logic_1;
        else 
            gmem_BREADY <= ap_const_logic_0;
        end if; 
    end process;

        gmem_WDATA <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_s_reg_1062),32));


    gmem_WVALID_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            gmem_WVALID <= ap_const_logic_1;
        else 
            gmem_WVALID <= ap_const_logic_0;
        end if; 
    end process;


    gmem_blk_n_AW_assign_proc : process(m_axi_gmem_AWREADY, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, first_iter_0_reg_342)
    begin
        if (((first_iter_0_reg_342 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            gmem_blk_n_AW <= m_axi_gmem_AWREADY;
        else 
            gmem_blk_n_AW <= ap_const_logic_1;
        end if; 
    end process;


    gmem_blk_n_B_assign_proc : process(m_axi_gmem_BVALID, ap_block_pp0_stage0, ap_enable_reg_pp0_iter7, icmp_ln107_1_reg_1052_pp0_iter6_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (icmp_ln107_1_reg_1052_pp0_iter6_reg = ap_const_lv1_1) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1))) then 
            gmem_blk_n_B <= m_axi_gmem_BVALID;
        else 
            gmem_blk_n_B <= ap_const_logic_1;
        end if; 
    end process;


    gmem_blk_n_W_assign_proc : process(m_axi_gmem_WREADY, ap_block_pp0_stage0, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            gmem_blk_n_W <= m_axi_gmem_WREADY;
        else 
            gmem_blk_n_W <= ap_const_logic_1;
        end if; 
    end process;

    i_1_fu_446_p3 <= 
        add_ln109_fu_428_p2 when (icmp_ln109_fu_422_p2(0) = '1') else 
        i_fu_312;
    icmp_ln107_1_fu_385_p2 <= "1" when (add_ln107_fu_379_p2 = ap_const_lv7_64) else "0";
    icmp_ln107_fu_373_p2 <= "1" when (loc_fu_316 = ap_const_lv7_64) else "0";
    icmp_ln109_fu_422_p2 <= "1" when (j_fu_308 = ap_const_lv32_A) else "0";
    j_1_fu_434_p3 <= 
        ap_const_lv32_0 when (icmp_ln109_fu_422_p2(0) = '1') else 
        j_fu_308;
    j_2_fu_1002_p2 <= std_logic_vector(unsigned(j_1_fu_434_p3) + unsigned(ap_const_lv32_1));
        sext_ln107_fu_405_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln_fu_396_p4),64));

    tmp_1_fu_510_p21 <= "XXXXXXXXXXXXXXX";
    tmp_2_fu_562_p21 <= "XXXXXXXXXXXXXXX";
    tmp_3_fu_614_p21 <= "XXXXXXXXXXXXXXXX";
    tmp_4_fu_662_p21 <= "XXXXXXXXXXXXXXXX";
    tmp_5_fu_710_p21 <= "XXXXXXXXXXXXXXXX";
    tmp_6_fu_758_p21 <= "XXXXXXXXXXXXXXXX";
    tmp_7_fu_806_p21 <= "XXXXXXXXXXXXXXX";
    tmp_8_fu_858_p21 <= "XXXXXXXXXXXXXXXX";
    tmp_9_fu_906_p21 <= "XXXXXXXXXXXXXXXX";
        tmp_s_fu_954_p16 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_7_fu_806_p23),16));

    tmp_s_fu_954_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln110_cast_fu_458_p23),16));
    tmp_s_fu_954_p21 <= "XXXXXXXXXXXXXXXX";
    tmp_s_fu_954_p22 <= i_1_fu_446_p3(4 - 1 downto 0);
        tmp_s_fu_954_p4 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_1_fu_510_p23),16));

        tmp_s_fu_954_p6 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_2_fu_562_p23),16));

    trunc_ln109_fu_442_p1 <= j_1_fu_434_p3(4 - 1 downto 0);
    trunc_ln_fu_396_p4 <= output_r_read_reg_1043(63 downto 2);
    zext_ln110_cast_fu_458_p21 <= "XXXXXXXXXXXXXXX";
end behav;
